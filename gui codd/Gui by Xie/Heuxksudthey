#pragma once
#include <iostream>
#include <sstream>
#include <cmath>
#include <regex>
#include <stack>
#include <string>
#include <cctype>
#include <msclr/marshal_cppstd.h>


namespace Heuxksudthey {
	
	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::Speech;
	using namespace System::Text;

	/// <summary>
	/// Summary for MyForm
	/// </summary>

	public ref class MyForm : public System::Windows::Forms::Form
	{
	public:
		MyForm(void)
		{
			InitializeComponent();
			//
		
		}
		double real;
	private: System::Windows::Forms::TextBox^ textBox1;
	public:
	private: System::Windows::Forms::Panel^ pnlOntextBox1;
	private: System::Windows::Forms::Button^ btnPRight;
	private: System::Windows::Forms::Panel^ pnlcandt;
	private: System::Windows::Forms::Panel^ pnlpd;

	private: System::Windows::Forms::TextBox^ MatrixCalculate;
	private: System::Windows::Forms::Button^ btnEqualsMatrix;


	private: System::Windows::Forms::TextBox^ Matrix2;
	private: System::Windows::Forms::TextBox^ Matrix3;


	private: System::Windows::Forms::TextBox^ Matrix1;
	private: System::Windows::Forms::Panel^ pnlOnButtonmatrix;


	private: System::Windows::Forms::Button^ btnShowVariable;

	private: System::Windows::Forms::Button^ btnShowMatrix;


	private: System::Windows::Forms::Button^ button6;
	private: System::Windows::Forms::Button^ btnShowInverse;


	private: System::Windows::Forms::Button^ button11;
	private: System::Windows::Forms::Button^ btnShowDet;



	private: System::Windows::Forms::Panel^ pnldet;

	private: System::Windows::Forms::Button^ btnEqualDet;

	private: System::Windows::Forms::TextBox^ btnDet1;
	private: System::Windows::Forms::TextBox^ btnDet2;
	private: System::Windows::Forms::Panel^ pnlinverse;
	private: System::Windows::Forms::Button^ btnEqualInverse;

	private: System::Windows::Forms::TextBox^ btnInverse1;
	private: System::Windows::Forms::TextBox^ btnInverse2;
	private: System::Windows::Forms::Panel^ pnlaj;
	private: System::Windows::Forms::Button^ btnEqualVariable;

	private: System::Windows::Forms::TextBox^ btnVariable1;
	private: System::Windows::Forms::TextBox^ btnVariable3;

	private: System::Windows::Forms::TextBox^ btnVariable2;
	private: System::Windows::Forms::Button^ btnspace2;
	private: System::Windows::Forms::Button^ btnPLife1;
	private: System::Windows::Forms::Button^ btnPRight1;

	private: System::Windows::Forms::Button^ button3;
	private: System::Windows::Forms::Button^ btnEqualsT;
	private: System::Windows::Forms::Button^ button1;



























		   double imag;
		MyForm(double x, double y)
		{
			real = x; imag = y;
		}
		MyForm^ operator+(const MyForm^ other)
		{
			MyForm^ result = gcnew MyForm(0, 0);
			result->real = real + other->real;
			result->imag = imag + other->imag;
			return result;
		}
		MyForm^ operator-(const MyForm^ other)
		{
			MyForm^ result = gcnew MyForm(0, 0);
			result->real = real - other->real;
			result->imag = imag - other->imag;
			return result;
		}

		MyForm^ operator*(const MyForm^ other)
		{
			MyForm^ result = gcnew MyForm(0, 0);
			result->real = real * other->real - imag * other->imag;
			result->imag = real * other->imag + imag * other->real;
			return result;
		}

		MyForm^ operator/(const MyForm^ other)
		{
			double denominator = other->real * other->real + other->imag * other->imag;
			MyForm^ result = gcnew MyForm(0, 0);
			result->real = (real * other->real + imag * other->imag) / denominator;
			result->imag = (imag * other->real - real * other->imag) / denominator;
			return result;
		}
		bool operator==(const MyForm^ other)
		{
			return (real == other->real) && (imag == other->imag);
		}

		// member functions
		double abs()
		{
			return Math::Sqrt(real * real + imag * imag);
		}

		double angle()
		{
			return Math::Atan2(imag, real) * 180 / 3.14159265358979;
		}














	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~MyForm()
		{
			if (components)
			{
				delete components;
			}
		}
	System::Windows::Forms::TextBox^ selectedTextBox = nullptr;
	private: System::Windows::Forms::Panel^ pnlLeftSize;
	protected:

	private: System::Windows::Forms::Panel^ pnlTopSize;
	private: System::Windows::Forms::Button^ btncalculus;


	private: System::Windows::Forms::Panel^ pnlOnButton;


	private: System::Windows::Forms::Button^ btnmatrix;



	private: System::Windows::Forms::Button^ btntrigonmetry;

	private: System::Windows::Forms::Button^ btnClear;

	private: System::Windows::Forms::Button^ btnLog;
	private: System::Windows::Forms::Button^ btnLogV;



	private: System::Windows::Forms::Button^ btnLn;
	private: System::Windows::Forms::Button^ btnPi;


	private: System::Windows::Forms::Button^ btn7;
	private: System::Windows::Forms::Button^ btn8;
	private: System::Windows::Forms::Button^ btnDelete;



	private: System::Windows::Forms::Button^ btn9;
	private: System::Windows::Forms::Button^ btn6;


	private: System::Windows::Forms::Button^ btnDevide;
	private: System::Windows::Forms::Button^ btn5;


	private: System::Windows::Forms::Button^ btn4;
	private: System::Windows::Forms::Button^ btnI;
	private: System::Windows::Forms::Button^ btnFactorial;




	private: System::Windows::Forms::Button^ btnEV;
	private: System::Windows::Forms::Button^ btnE;


	private: System::Windows::Forms::Button^ btn3;

	private: System::Windows::Forms::Button^ btnMultipled;
	private: System::Windows::Forms::Button^ btn2;


	private: System::Windows::Forms::Button^ btn1;
	private: System::Windows::Forms::Button^ btnX;
	private: System::Windows::Forms::Button^ btnFraction;








	private: System::Windows::Forms::Button^ btnPlus;

	private: System::Windows::Forms::Button^ btnMinus;
	private: System::Windows::Forms::Button^ btnDot;


	private: System::Windows::Forms::Button^ btn0;
	private: System::Windows::Forms::Button^ btnY;
	private: System::Windows::Forms::Button^ btnPow;



	private: System::Windows::Forms::Button^ button34;



	private: System::Windows::Forms::Button^ btnLeft;

	private: System::Windows::Forms::Button^ btnRight;
private: System::Windows::Forms::Button^ btnEqualsC;







private: System::Windows::Forms::Button^ btnZ;
private: System::Windows::Forms::Button^ btnRoot;
private: System::Windows::Forms::Button^ btnRootV;

private: System::Windows::Forms::Button^ btnPLife;











private: System::Windows::Forms::Button^ btnout;
private: System::Windows::Forms::Panel^ pnlcalculus;

private: System::Windows::Forms::Panel^ pnltrigonmetry;

private: System::Windows::Forms::Button^ btncos;
private: System::Windows::Forms::Button^ btnsec;
private: System::Windows::Forms::Button^ btnsin;
private: System::Windows::Forms::Button^ btntanh;

private: System::Windows::Forms::Button^ btntan;
private: System::Windows::Forms::Button^ btncot;
private: System::Windows::Forms::Button^ btncosh;

private: System::Windows::Forms::Button^ btnsinh;

private: System::Windows::Forms::Button^ btncsc;
private: System::Windows::Forms::Button^ btnspace1;





















private: System::Windows::Forms::Button^ btnIntegrate;
public: System::Speech::Synthesis::SpeechSynthesizer^ spi; //spi คือชื่อตัวแปร
private: System::Windows::Forms::Button^ btnEnter;
public:









































private: System::ComponentModel::IContainer^ components;


public:

public:

public:



















	protected:

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>


#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			System::ComponentModel::ComponentResourceManager^ resources = (gcnew System::ComponentModel::ComponentResourceManager(MyForm::typeid));
			this->pnlLeftSize = (gcnew System::Windows::Forms::Panel());
			this->pnlOnButton = (gcnew System::Windows::Forms::Panel());
			this->btnout = (gcnew System::Windows::Forms::Button());
			this->btnmatrix = (gcnew System::Windows::Forms::Button());
			this->btntrigonmetry = (gcnew System::Windows::Forms::Button());
			this->btncalculus = (gcnew System::Windows::Forms::Button());
			this->btnEnter = (gcnew System::Windows::Forms::Button());
			this->pnlTopSize = (gcnew System::Windows::Forms::Panel());
			this->btnClear = (gcnew System::Windows::Forms::Button());
			this->btnLog = (gcnew System::Windows::Forms::Button());
			this->btnLogV = (gcnew System::Windows::Forms::Button());
			this->btnLn = (gcnew System::Windows::Forms::Button());
			this->btnPi = (gcnew System::Windows::Forms::Button());
			this->btn7 = (gcnew System::Windows::Forms::Button());
			this->btn8 = (gcnew System::Windows::Forms::Button());
			this->btnDelete = (gcnew System::Windows::Forms::Button());
			this->btn9 = (gcnew System::Windows::Forms::Button());
			this->btn6 = (gcnew System::Windows::Forms::Button());
			this->btnDevide = (gcnew System::Windows::Forms::Button());
			this->btn5 = (gcnew System::Windows::Forms::Button());
			this->btn4 = (gcnew System::Windows::Forms::Button());
			this->btnI = (gcnew System::Windows::Forms::Button());
			this->btnFactorial = (gcnew System::Windows::Forms::Button());
			this->btnEV = (gcnew System::Windows::Forms::Button());
			this->btnE = (gcnew System::Windows::Forms::Button());
			this->btn3 = (gcnew System::Windows::Forms::Button());
			this->btnMultipled = (gcnew System::Windows::Forms::Button());
			this->btn2 = (gcnew System::Windows::Forms::Button());
			this->btn1 = (gcnew System::Windows::Forms::Button());
			this->btnX = (gcnew System::Windows::Forms::Button());
			this->btnFraction = (gcnew System::Windows::Forms::Button());
			this->btnPlus = (gcnew System::Windows::Forms::Button());
			this->btnMinus = (gcnew System::Windows::Forms::Button());
			this->btnDot = (gcnew System::Windows::Forms::Button());
			this->btn0 = (gcnew System::Windows::Forms::Button());
			this->btnY = (gcnew System::Windows::Forms::Button());
			this->btnPow = (gcnew System::Windows::Forms::Button());
			this->button34 = (gcnew System::Windows::Forms::Button());
			this->btnLeft = (gcnew System::Windows::Forms::Button());
			this->btnRight = (gcnew System::Windows::Forms::Button());
			this->btnEqualsC = (gcnew System::Windows::Forms::Button());
			this->btnZ = (gcnew System::Windows::Forms::Button());
			this->btnRoot = (gcnew System::Windows::Forms::Button());
			this->btnRootV = (gcnew System::Windows::Forms::Button());
			this->btnPLife = (gcnew System::Windows::Forms::Button());
			this->pnlcalculus = (gcnew System::Windows::Forms::Panel());
			this->btnspace1 = (gcnew System::Windows::Forms::Button());
			this->btnPRight = (gcnew System::Windows::Forms::Button());
			this->btnIntegrate = (gcnew System::Windows::Forms::Button());
			this->pnltrigonmetry = (gcnew System::Windows::Forms::Panel());
			this->btncos = (gcnew System::Windows::Forms::Button());
			this->btnsec = (gcnew System::Windows::Forms::Button());
			this->btnsin = (gcnew System::Windows::Forms::Button());
			this->btntanh = (gcnew System::Windows::Forms::Button());
			this->btntan = (gcnew System::Windows::Forms::Button());
			this->btncot = (gcnew System::Windows::Forms::Button());
			this->btncosh = (gcnew System::Windows::Forms::Button());
			this->btnsinh = (gcnew System::Windows::Forms::Button());
			this->btncsc = (gcnew System::Windows::Forms::Button());
			this->textBox1 = (gcnew System::Windows::Forms::TextBox());
			this->pnlOntextBox1 = (gcnew System::Windows::Forms::Panel());
			this->pnlcandt = (gcnew System::Windows::Forms::Panel());
			this->btnPLife1 = (gcnew System::Windows::Forms::Button());
			this->btnPRight1 = (gcnew System::Windows::Forms::Button());
			this->button3 = (gcnew System::Windows::Forms::Button());
			this->pnlaj = (gcnew System::Windows::Forms::Panel());
			this->btnVariable2 = (gcnew System::Windows::Forms::TextBox());
			this->btnEqualVariable = (gcnew System::Windows::Forms::Button());
			this->btnVariable1 = (gcnew System::Windows::Forms::TextBox());
			this->btnVariable3 = (gcnew System::Windows::Forms::TextBox());
			this->pnlinverse = (gcnew System::Windows::Forms::Panel());
			this->btnEqualInverse = (gcnew System::Windows::Forms::Button());
			this->btnInverse1 = (gcnew System::Windows::Forms::TextBox());
			this->btnInverse2 = (gcnew System::Windows::Forms::TextBox());
			this->pnldet = (gcnew System::Windows::Forms::Panel());
			this->btnEqualDet = (gcnew System::Windows::Forms::Button());
			this->btnDet1 = (gcnew System::Windows::Forms::TextBox());
			this->btnDet2 = (gcnew System::Windows::Forms::TextBox());
			this->pnlpd = (gcnew System::Windows::Forms::Panel());
			this->MatrixCalculate = (gcnew System::Windows::Forms::TextBox());
			this->btnEqualsMatrix = (gcnew System::Windows::Forms::Button());
			this->Matrix2 = (gcnew System::Windows::Forms::TextBox());
			this->Matrix3 = (gcnew System::Windows::Forms::TextBox());
			this->Matrix1 = (gcnew System::Windows::Forms::TextBox());
			this->pnlOnButtonmatrix = (gcnew System::Windows::Forms::Panel());
			this->btnspace2 = (gcnew System::Windows::Forms::Button());
			this->btnShowVariable = (gcnew System::Windows::Forms::Button());
			this->btnShowMatrix = (gcnew System::Windows::Forms::Button());
			this->button6 = (gcnew System::Windows::Forms::Button());
			this->btnShowInverse = (gcnew System::Windows::Forms::Button());
			this->button11 = (gcnew System::Windows::Forms::Button());
			this->btnShowDet = (gcnew System::Windows::Forms::Button());
			this->btnEqualsT = (gcnew System::Windows::Forms::Button());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->pnlLeftSize->SuspendLayout();
			this->pnlcalculus->SuspendLayout();
			this->pnltrigonmetry->SuspendLayout();
			this->pnlOntextBox1->SuspendLayout();
			this->pnlcandt->SuspendLayout();
			this->pnlaj->SuspendLayout();
			this->pnlinverse->SuspendLayout();
			this->pnldet->SuspendLayout();
			this->pnlpd->SuspendLayout();
			this->pnlOnButtonmatrix->SuspendLayout();
			this->SuspendLayout();
			// 
			// pnlLeftSize
			// 
			this->pnlLeftSize->BackColor = System::Drawing::Color::Red;
			this->pnlLeftSize->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"pnlLeftSize.BackgroundImage")));
			this->pnlLeftSize->Controls->Add(this->pnlOnButton);
			this->pnlLeftSize->Controls->Add(this->btnout);
			this->pnlLeftSize->Controls->Add(this->btnmatrix);
			this->pnlLeftSize->Controls->Add(this->btntrigonmetry);
			this->pnlLeftSize->Controls->Add(this->btncalculus);
			this->pnlLeftSize->Dock = System::Windows::Forms::DockStyle::Left;
			this->pnlLeftSize->Location = System::Drawing::Point(0, 0);
			this->pnlLeftSize->Name = L"pnlLeftSize";
			this->pnlLeftSize->Size = System::Drawing::Size(254, 666);
			this->pnlLeftSize->TabIndex = 0;
			// 
			// pnlOnButton
			// 
			this->pnlOnButton->BackColor = System::Drawing::Color::White;
			this->pnlOnButton->Location = System::Drawing::Point(0, 183);
			this->pnlOnButton->Name = L"pnlOnButton";
			this->pnlOnButton->Size = System::Drawing::Size(15, 60);
			this->pnlOnButton->TabIndex = 2;
			// 
			// btnout
			// 
			this->btnout->BackColor = System::Drawing::Color::Red;
			this->btnout->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnout.BackgroundImage")));
			this->btnout->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnout->FlatAppearance->BorderSize = 0;
			this->btnout->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->btnout->Location = System::Drawing::Point(3, 3);
			this->btnout->Name = L"btnout";
			this->btnout->Size = System::Drawing::Size(30, 30);
			this->btnout->TabIndex = 48;
			this->btnout->UseVisualStyleBackColor = false;
			this->btnout->Click += gcnew System::EventHandler(this, &MyForm::btnout_Click);
			// 
			// btnmatrix
			// 
			this->btnmatrix->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnmatrix.BackgroundImage")));
			this->btnmatrix->FlatAppearance->BorderSize = 0;
			this->btnmatrix->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->btnmatrix->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 19.8F, System::Drawing::FontStyle::Italic, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnmatrix->ForeColor = System::Drawing::Color::White;
			this->btnmatrix->Location = System::Drawing::Point(0, 376);
			this->btnmatrix->Name = L"btnmatrix";
			this->btnmatrix->Size = System::Drawing::Size(254, 60);
			this->btnmatrix->TabIndex = 6;
			this->btnmatrix->Text = L"Matrix";
			this->btnmatrix->UseVisualStyleBackColor = true;
			this->btnmatrix->Click += gcnew System::EventHandler(this, &MyForm::btnmatrix_Click);
			// 
			// btntrigonmetry
			// 
			this->btntrigonmetry->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btntrigonmetry.BackgroundImage")));
			this->btntrigonmetry->FlatAppearance->BorderSize = 0;
			this->btntrigonmetry->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->btntrigonmetry->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 19.8F, System::Drawing::FontStyle::Italic, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btntrigonmetry->ForeColor = System::Drawing::Color::White;
			this->btntrigonmetry->Location = System::Drawing::Point(0, 281);
			this->btntrigonmetry->Name = L"btntrigonmetry";
			this->btntrigonmetry->Size = System::Drawing::Size(254, 60);
			this->btntrigonmetry->TabIndex = 4;
			this->btntrigonmetry->Text = L"Trigonometry";
			this->btntrigonmetry->UseVisualStyleBackColor = true;
			this->btntrigonmetry->Click += gcnew System::EventHandler(this, &MyForm::btntrigonmetry_Click);
			// 
			// btncalculus
			// 
			this->btncalculus->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btncalculus.BackgroundImage")));
			this->btncalculus->FlatAppearance->BorderSize = 0;
			this->btncalculus->FlatStyle = System::Windows::Forms::FlatStyle::Flat;
			this->btncalculus->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 19.8F, System::Drawing::FontStyle::Italic, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btncalculus->ForeColor = System::Drawing::Color::White;
			this->btncalculus->Location = System::Drawing::Point(0, 183);
			this->btncalculus->Name = L"btncalculus";
			this->btncalculus->Size = System::Drawing::Size(254, 60);
			this->btncalculus->TabIndex = 2;
			this->btncalculus->Text = L"Calculus";
			this->btncalculus->UseVisualStyleBackColor = true;
			this->btncalculus->Click += gcnew System::EventHandler(this, &MyForm::btncalcules_Click);
			// 
			// btnEnter
			// 
			this->btnEnter->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnEnter->Location = System::Drawing::Point(29, 510);
			this->btnEnter->Name = L"btnEnter";
			this->btnEnter->Size = System::Drawing::Size(285, 70);
			this->btnEnter->TabIndex = 12;
			this->btnEnter->Text = L"Enter";
			this->btnEnter->UseVisualStyleBackColor = true;
			this->btnEnter->Click += gcnew System::EventHandler(this, &MyForm::btnEnter_Click);
			// 
			// pnlTopSize
			// 
			this->pnlTopSize->BackColor = System::Drawing::Color::LightGray;
			this->pnlTopSize->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"pnlTopSize.BackgroundImage")));
			this->pnlTopSize->Dock = System::Windows::Forms::DockStyle::Top;
			this->pnlTopSize->Location = System::Drawing::Point(254, 0);
			this->pnlTopSize->Name = L"pnlTopSize";
			this->pnlTopSize->Size = System::Drawing::Size(926, 56);
			this->pnlTopSize->TabIndex = 1;
			// 
			// btnClear
			// 
			this->btnClear->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnClear->Location = System::Drawing::Point(29, 206);
			this->btnClear->Name = L"btnClear";
			this->btnClear->Size = System::Drawing::Size(91, 70);
			this->btnClear->TabIndex = 3;
			this->btnClear->Text = L"AC";
			this->btnClear->UseVisualStyleBackColor = true;
			this->btnClear->Click += gcnew System::EventHandler(this, &MyForm::btnClear_Click);
			// 
			// btnLog
			// 
			this->btnLog->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnLog.BackgroundImage")));
			this->btnLog->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnLog->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnLog->Location = System::Drawing::Point(126, 206);
			this->btnLog->Name = L"btnLog";
			this->btnLog->Size = System::Drawing::Size(91, 70);
			this->btnLog->TabIndex = 4;
			this->btnLog->UseVisualStyleBackColor = true;
			this->btnLog->Click += gcnew System::EventHandler(this, &MyForm::btnLog_Click);
			// 
			// btnLogV
			// 
			this->btnLogV->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnLogV.BackgroundImage")));
			this->btnLogV->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnLogV->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnLogV->Location = System::Drawing::Point(223, 206);
			this->btnLogV->Name = L"btnLogV";
			this->btnLogV->Size = System::Drawing::Size(91, 70);
			this->btnLogV->TabIndex = 5;
			this->btnLogV->UseVisualStyleBackColor = true;
			this->btnLogV->Click += gcnew System::EventHandler(this, &MyForm::btnLogV_Click);
			// 
			// btnLn
			// 
			this->btnLn->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnLn->Location = System::Drawing::Point(320, 206);
			this->btnLn->Name = L"btnLn";
			this->btnLn->Size = System::Drawing::Size(91, 70);
			this->btnLn->TabIndex = 6;
			this->btnLn->Text = L"ln";
			this->btnLn->UseVisualStyleBackColor = true;
			this->btnLn->Click += gcnew System::EventHandler(this, &MyForm::btnLn_Click);
			// 
			// btnPi
			// 
			this->btnPi->Font = (gcnew System::Drawing::Font(L"Centaur", 22.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(0)));
			this->btnPi->Location = System::Drawing::Point(417, 206);
			this->btnPi->Name = L"btnPi";
			this->btnPi->Size = System::Drawing::Size(91, 70);
			this->btnPi->TabIndex = 7;
			this->btnPi->Text = L"π";
			this->btnPi->UseVisualStyleBackColor = true;
			this->btnPi->Click += gcnew System::EventHandler(this, &MyForm::btnPi_Click);
			// 
			// btn7
			// 
			this->btn7->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn7->Location = System::Drawing::Point(514, 206);
			this->btn7->Name = L"btn7";
			this->btn7->Size = System::Drawing::Size(91, 70);
			this->btn7->TabIndex = 8;
			this->btn7->Text = L"7";
			this->btn7->UseVisualStyleBackColor = true;
			this->btn7->Click += gcnew System::EventHandler(this, &MyForm::btn7_Click);
			// 
			// btn8
			// 
			this->btn8->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn8->Location = System::Drawing::Point(611, 206);
			this->btn8->Name = L"btn8";
			this->btn8->Size = System::Drawing::Size(91, 70);
			this->btn8->TabIndex = 9;
			this->btn8->Text = L"8";
			this->btn8->UseVisualStyleBackColor = true;
			this->btn8->Click += gcnew System::EventHandler(this, &MyForm::btn8_Click);
			// 
			// btnDelete
			// 
			this->btnDelete->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnDelete->Location = System::Drawing::Point(805, 206);
			this->btnDelete->Name = L"btnDelete";
			this->btnDelete->Size = System::Drawing::Size(91, 70);
			this->btnDelete->TabIndex = 9;
			this->btnDelete->Text = L"DEL";
			this->btnDelete->UseVisualStyleBackColor = true;
			this->btnDelete->Click += gcnew System::EventHandler(this, &MyForm::btnDelete_Click);
			// 
			// btn9
			// 
			this->btn9->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn9->Location = System::Drawing::Point(708, 206);
			this->btn9->Name = L"btn9";
			this->btn9->Size = System::Drawing::Size(91, 70);
			this->btn9->TabIndex = 9;
			this->btn9->Text = L"9";
			this->btn9->UseVisualStyleBackColor = true;
			this->btn9->Click += gcnew System::EventHandler(this, &MyForm::btn9_Click);
			// 
			// btn6
			// 
			this->btn6->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn6->Location = System::Drawing::Point(708, 282);
			this->btn6->Name = L"btn6";
			this->btn6->Size = System::Drawing::Size(91, 70);
			this->btn6->TabIndex = 16;
			this->btn6->Text = L"6";
			this->btn6->UseVisualStyleBackColor = true;
			this->btn6->Click += gcnew System::EventHandler(this, &MyForm::btn6_Click);
			// 
			// btnDevide
			// 
			this->btnDevide->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnDevide->Location = System::Drawing::Point(805, 282);
			this->btnDevide->Name = L"btnDevide";
			this->btnDevide->Size = System::Drawing::Size(91, 70);
			this->btnDevide->TabIndex = 17;
			this->btnDevide->Text = L"÷";
			this->btnDevide->UseVisualStyleBackColor = true;
			this->btnDevide->Click += gcnew System::EventHandler(this, &MyForm::btnDevide_Click);
			// 
			// btn5
			// 
			this->btn5->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn5->Location = System::Drawing::Point(611, 282);
			this->btn5->Name = L"btn5";
			this->btn5->Size = System::Drawing::Size(91, 70);
			this->btn5->TabIndex = 18;
			this->btn5->Text = L"5";
			this->btn5->UseVisualStyleBackColor = true;
			this->btn5->Click += gcnew System::EventHandler(this, &MyForm::btn5_Click);
			// 
			// btn4
			// 
			this->btn4->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn4->Location = System::Drawing::Point(514, 282);
			this->btn4->Name = L"btn4";
			this->btn4->Size = System::Drawing::Size(91, 70);
			this->btn4->TabIndex = 15;
			this->btn4->Text = L"4";
			this->btn4->UseVisualStyleBackColor = true;
			this->btn4->Click += gcnew System::EventHandler(this, &MyForm::btn4_Click);
			// 
			// btnI
			// 
			this->btnI->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnI->Location = System::Drawing::Point(417, 282);
			this->btnI->Name = L"btnI";
			this->btnI->Size = System::Drawing::Size(91, 70);
			this->btnI->TabIndex = 14;
			this->btnI->Text = L"i";
			this->btnI->UseVisualStyleBackColor = true;
			this->btnI->Click += gcnew System::EventHandler(this, &MyForm::btnI_Click);
			// 
			// btnFactorial
			// 
			this->btnFactorial->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnFactorial.BackgroundImage")));
			this->btnFactorial->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnFactorial->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnFactorial->Location = System::Drawing::Point(320, 282);
			this->btnFactorial->Name = L"btnFactorial";
			this->btnFactorial->Size = System::Drawing::Size(91, 70);
			this->btnFactorial->TabIndex = 13;
			this->btnFactorial->UseVisualStyleBackColor = true;
			this->btnFactorial->Click += gcnew System::EventHandler(this, &MyForm::btnFactorial_Click);
			// 
			// btnEV
			// 
			this->btnEV->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnEV.BackgroundImage")));
			this->btnEV->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnEV->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnEV->Location = System::Drawing::Point(221, 5);
			this->btnEV->Name = L"btnEV";
			this->btnEV->Size = System::Drawing::Size(91, 70);
			this->btnEV->TabIndex = 11;
			this->btnEV->UseVisualStyleBackColor = true;
			this->btnEV->Click += gcnew System::EventHandler(this, &MyForm::btnEV_Click);
			// 
			// btnE
			// 
			this->btnE->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnE.BackgroundImage")));
			this->btnE->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnE->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnE->Location = System::Drawing::Point(124, 5);
			this->btnE->Name = L"btnE";
			this->btnE->Size = System::Drawing::Size(91, 70);
			this->btnE->TabIndex = 10;
			this->btnE->UseVisualStyleBackColor = true;
			this->btnE->Click += gcnew System::EventHandler(this, &MyForm::btnE_Click);
			// 
			// btn3
			// 
			this->btn3->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn3->Location = System::Drawing::Point(708, 358);
			this->btn3->Name = L"btn3";
			this->btn3->Size = System::Drawing::Size(91, 70);
			this->btn3->TabIndex = 25;
			this->btn3->Text = L"3";
			this->btn3->UseVisualStyleBackColor = true;
			this->btn3->Click += gcnew System::EventHandler(this, &MyForm::btn3_Click);
			// 
			// btnMultipled
			// 
			this->btnMultipled->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnMultipled->Location = System::Drawing::Point(805, 358);
			this->btnMultipled->Name = L"btnMultipled";
			this->btnMultipled->Size = System::Drawing::Size(91, 70);
			this->btnMultipled->TabIndex = 26;
			this->btnMultipled->Text = L"×";
			this->btnMultipled->UseVisualStyleBackColor = true;
			this->btnMultipled->Click += gcnew System::EventHandler(this, &MyForm::btnMultipled_Click);
			// 
			// btn2
			// 
			this->btn2->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn2->Location = System::Drawing::Point(611, 358);
			this->btn2->Name = L"btn2";
			this->btn2->Size = System::Drawing::Size(91, 70);
			this->btn2->TabIndex = 27;
			this->btn2->Text = L"2";
			this->btn2->UseVisualStyleBackColor = true;
			this->btn2->Click += gcnew System::EventHandler(this, &MyForm::btn2_Click);
			// 
			// btn1
			// 
			this->btn1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn1->Location = System::Drawing::Point(514, 358);
			this->btn1->Name = L"btn1";
			this->btn1->Size = System::Drawing::Size(91, 70);
			this->btn1->TabIndex = 24;
			this->btn1->Text = L"1";
			this->btn1->UseVisualStyleBackColor = true;
			this->btn1->Click += gcnew System::EventHandler(this, &MyForm::btn1_Click);
			// 
			// btnX
			// 
			this->btnX->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnX->Location = System::Drawing::Point(417, 358);
			this->btnX->Name = L"btnX";
			this->btnX->Size = System::Drawing::Size(91, 70);
			this->btnX->TabIndex = 23;
			this->btnX->Text = L"x";
			this->btnX->UseVisualStyleBackColor = true;
			this->btnX->Click += gcnew System::EventHandler(this, &MyForm::btnX_Click);
			// 
			// btnFraction
			// 
			this->btnFraction->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnFraction.BackgroundImage")));
			this->btnFraction->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnFraction->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnFraction->Location = System::Drawing::Point(320, 358);
			this->btnFraction->Name = L"btnFraction";
			this->btnFraction->Size = System::Drawing::Size(91, 70);
			this->btnFraction->TabIndex = 22;
			this->btnFraction->UseVisualStyleBackColor = true;
			this->btnFraction->Click += gcnew System::EventHandler(this, &MyForm::Complex_Click);
			// 
			// btnPlus
			// 
			this->btnPlus->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnPlus->Location = System::Drawing::Point(708, 434);
			this->btnPlus->Name = L"btnPlus";
			this->btnPlus->Size = System::Drawing::Size(91, 70);
			this->btnPlus->TabIndex = 34;
			this->btnPlus->Text = L"+";
			this->btnPlus->UseVisualStyleBackColor = true;
			this->btnPlus->Click += gcnew System::EventHandler(this, &MyForm::btnPlus_Click);
			// 
			// btnMinus
			// 
			this->btnMinus->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnMinus->Location = System::Drawing::Point(805, 434);
			this->btnMinus->Name = L"btnMinus";
			this->btnMinus->Size = System::Drawing::Size(91, 70);
			this->btnMinus->TabIndex = 35;
			this->btnMinus->Text = L"-";
			this->btnMinus->UseVisualStyleBackColor = true;
			this->btnMinus->Click += gcnew System::EventHandler(this, &MyForm::btnMinus_Click);
			// 
			// btnDot
			// 
			this->btnDot->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnDot->Location = System::Drawing::Point(611, 434);
			this->btnDot->Name = L"btnDot";
			this->btnDot->Size = System::Drawing::Size(91, 70);
			this->btnDot->TabIndex = 36;
			this->btnDot->Text = L".";
			this->btnDot->UseVisualStyleBackColor = true;
			this->btnDot->Click += gcnew System::EventHandler(this, &MyForm::btnDot_Click);
			// 
			// btn0
			// 
			this->btn0->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btn0->Location = System::Drawing::Point(514, 434);
			this->btn0->Name = L"btn0";
			this->btn0->Size = System::Drawing::Size(91, 70);
			this->btn0->TabIndex = 33;
			this->btn0->Text = L"0";
			this->btn0->UseVisualStyleBackColor = true;
			this->btn0->Click += gcnew System::EventHandler(this, &MyForm::btn0_Click);
			// 
			// btnY
			// 
			this->btnY->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnY->Location = System::Drawing::Point(417, 434);
			this->btnY->Name = L"btnY";
			this->btnY->Size = System::Drawing::Size(91, 70);
			this->btnY->TabIndex = 32;
			this->btnY->Text = L"y";
			this->btnY->UseVisualStyleBackColor = true;
			this->btnY->Click += gcnew System::EventHandler(this, &MyForm::btnY_Click);
			// 
			// btnPow
			// 
			this->btnPow->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnPow.BackgroundImage")));
			this->btnPow->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnPow->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnPow->Location = System::Drawing::Point(320, 434);
			this->btnPow->Name = L"btnPow";
			this->btnPow->Size = System::Drawing::Size(91, 70);
			this->btnPow->TabIndex = 31;
			this->btnPow->UseVisualStyleBackColor = true;
			this->btnPow->Click += gcnew System::EventHandler(this, &MyForm::btnPow_Click);
			// 
			// button34
			// 
			this->button34->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->button34->Location = System::Drawing::Point(27, 5);
			this->button34->Name = L"button34";
			this->button34->Size = System::Drawing::Size(91, 70);
			this->button34->TabIndex = 30;
			this->button34->UseVisualStyleBackColor = true;
			// 
			// btnLeft
			// 
			this->btnLeft->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnLeft->Location = System::Drawing::Point(708, 510);
			this->btnLeft->Name = L"btnLeft";
			this->btnLeft->Size = System::Drawing::Size(91, 70);
			this->btnLeft->TabIndex = 43;
			this->btnLeft->Text = L"(";
			this->btnLeft->UseVisualStyleBackColor = true;
			this->btnLeft->Click += gcnew System::EventHandler(this, &MyForm::btnLeft_Click);
			// 
			// btnRight
			// 
			this->btnRight->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnRight->Location = System::Drawing::Point(805, 510);
			this->btnRight->Name = L"btnRight";
			this->btnRight->Size = System::Drawing::Size(91, 70);
			this->btnRight->TabIndex = 44;
			this->btnRight->Text = L")";
			this->btnRight->UseVisualStyleBackColor = true;
			this->btnRight->Click += gcnew System::EventHandler(this, &MyForm::btnRight_Click);
			// 
			// btnEqualsC
			// 
			this->btnEqualsC->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnEqualsC->Location = System::Drawing::Point(611, 510);
			this->btnEqualsC->Name = L"btnEqualsC";
			this->btnEqualsC->Size = System::Drawing::Size(91, 70);
			this->btnEqualsC->TabIndex = 45;
			this->btnEqualsC->Text = L"=";
			this->btnEqualsC->UseVisualStyleBackColor = true;
			this->btnEqualsC->Click += gcnew System::EventHandler(this, &MyForm::btnEquals_Click);
			// 
			// btnZ
			// 
			this->btnZ->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnZ->Location = System::Drawing::Point(514, 510);
			this->btnZ->Name = L"btnZ";
			this->btnZ->Size = System::Drawing::Size(91, 70);
			this->btnZ->TabIndex = 41;
			this->btnZ->Text = L"z";
			this->btnZ->UseVisualStyleBackColor = true;
			this->btnZ->Click += gcnew System::EventHandler(this, &MyForm::btnZ_Click);
			// 
			// btnRoot
			// 
			this->btnRoot->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnRoot.BackgroundImage")));
			this->btnRoot->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnRoot->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnRoot->Location = System::Drawing::Point(417, 510);
			this->btnRoot->Name = L"btnRoot";
			this->btnRoot->RightToLeft = System::Windows::Forms::RightToLeft::No;
			this->btnRoot->Size = System::Drawing::Size(91, 70);
			this->btnRoot->TabIndex = 40;
			this->btnRoot->UseVisualStyleBackColor = true;
			this->btnRoot->Click += gcnew System::EventHandler(this, &MyForm::btnRoot_Click);
			// 
			// btnRootV
			// 
			this->btnRootV->BackgroundImage = (cli::safe_cast<System::Drawing::Image^>(resources->GetObject(L"btnRootV.BackgroundImage")));
			this->btnRootV->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnRootV->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnRootV->Location = System::Drawing::Point(320, 510);
			this->btnRootV->Name = L"btnRootV";
			this->btnRootV->Size = System::Drawing::Size(91, 70);
			this->btnRootV->TabIndex = 39;
			this->btnRootV->UseVisualStyleBackColor = true;
			this->btnRootV->Click += gcnew System::EventHandler(this, &MyForm::btnRootV_Click);
			// 
			// btnPLife
			// 
			this->btnPLife->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnPLife->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnPLife->Location = System::Drawing::Point(125, 81);
			this->btnPLife->Name = L"btnPLife";
			this->btnPLife->Size = System::Drawing::Size(91, 70);
			this->btnPLife->TabIndex = 37;
			this->btnPLife->Text = L"←";
			this->btnPLife->UseVisualStyleBackColor = true;
			this->btnPLife->Click += gcnew System::EventHandler(this, &MyForm::BtnPLife_Click);
			// 
			// pnlcalculus
			// 
			this->pnlcalculus->Controls->Add(this->btnspace1);
			this->pnlcalculus->Controls->Add(this->btnPLife);
			this->pnlcalculus->Controls->Add(this->button34);
			this->pnlcalculus->Controls->Add(this->btnPRight);
			this->pnlcalculus->Controls->Add(this->btnEV);
			this->pnlcalculus->Controls->Add(this->btnIntegrate);
			this->pnlcalculus->Controls->Add(this->btnE);
			this->pnlcalculus->Location = System::Drawing::Point(2, 277);
			this->pnlcalculus->Name = L"pnlcalculus";
			this->pnlcalculus->Size = System::Drawing::Size(318, 236);
			this->pnlcalculus->TabIndex = 48;
			// 
			// btnspace1
			// 
			this->btnspace1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnspace1->Location = System::Drawing::Point(27, 157);
			this->btnspace1->Name = L"btnspace1";
			this->btnspace1->Size = System::Drawing::Size(285, 70);
			this->btnspace1->TabIndex = 47;
			this->btnspace1->Text = L"space";
			this->btnspace1->UseVisualStyleBackColor = true;
			this->btnspace1->Click += gcnew System::EventHandler(this, &MyForm::btnspace1_Click);
			// 
			// btnPRight
			// 
			this->btnPRight->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnPRight->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnPRight->Location = System::Drawing::Point(221, 81);
			this->btnPRight->Name = L"btnPRight";
			this->btnPRight->Size = System::Drawing::Size(91, 70);
			this->btnPRight->TabIndex = 38;
			this->btnPRight->Text = L"→";
			this->btnPRight->UseVisualStyleBackColor = true;
			this->btnPRight->Click += gcnew System::EventHandler(this, &MyForm::btnPRight_Click);
			// 
			// btnIntegrate
			// 
			this->btnIntegrate->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnIntegrate->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnIntegrate->Location = System::Drawing::Point(28, 81);
			this->btnIntegrate->Name = L"btnIntegrate";
			this->btnIntegrate->Size = System::Drawing::Size(91, 70);
			this->btnIntegrate->TabIndex = 10;
			this->btnIntegrate->UseVisualStyleBackColor = true;
			// 
			// pnltrigonmetry
			// 
			this->pnltrigonmetry->Controls->Add(this->btncos);
			this->pnltrigonmetry->Controls->Add(this->btnsec);
			this->pnltrigonmetry->Controls->Add(this->btnsin);
			this->pnltrigonmetry->Controls->Add(this->btntanh);
			this->pnltrigonmetry->Controls->Add(this->btntan);
			this->pnltrigonmetry->Controls->Add(this->btncot);
			this->pnltrigonmetry->Controls->Add(this->btncosh);
			this->pnltrigonmetry->Controls->Add(this->btnsinh);
			this->pnltrigonmetry->Controls->Add(this->btncsc);
			this->pnltrigonmetry->Location = System::Drawing::Point(18, 277);
			this->pnltrigonmetry->Name = L"pnltrigonmetry";
			this->pnltrigonmetry->Size = System::Drawing::Size(302, 233);
			this->pnltrigonmetry->TabIndex = 49;
			// 
			// btncos
			// 
			this->btncos->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btncos->Location = System::Drawing::Point(11, 81);
			this->btncos->Name = L"btncos";
			this->btncos->Size = System::Drawing::Size(91, 70);
			this->btncos->TabIndex = 47;
			this->btncos->Text = L"cos";
			this->btncos->UseVisualStyleBackColor = true;
			this->btncos->Click += gcnew System::EventHandler(this, &MyForm::btncos_Click);
			// 
			// btnsec
			// 
			this->btnsec->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnsec->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnsec->Location = System::Drawing::Point(108, 81);
			this->btnsec->Name = L"btnsec";
			this->btnsec->Size = System::Drawing::Size(91, 70);
			this->btnsec->TabIndex = 42;
			this->btnsec->Text = L"sec";
			this->btnsec->UseVisualStyleBackColor = true;
			this->btnsec->Click += gcnew System::EventHandler(this, &MyForm::btnsec_Click);
			// 
			// btnsin
			// 
			this->btnsin->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnsin->Location = System::Drawing::Point(11, 5);
			this->btnsin->Name = L"btnsin";
			this->btnsin->Size = System::Drawing::Size(91, 70);
			this->btnsin->TabIndex = 30;
			this->btnsin->Text = L"sin";
			this->btnsin->UseVisualStyleBackColor = true;
			this->btnsin->Click += gcnew System::EventHandler(this, &MyForm::btnsin_Click);
			// 
			// btntanh
			// 
			this->btntanh->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btntanh->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btntanh->Location = System::Drawing::Point(205, 157);
			this->btntanh->Name = L"btntanh";
			this->btntanh->Size = System::Drawing::Size(91, 70);
			this->btntanh->TabIndex = 29;
			this->btntanh->Text = L"tanh";
			this->btntanh->UseVisualStyleBackColor = true;
			this->btntanh->Click += gcnew System::EventHandler(this, &MyForm::btntanh_Click);
			// 
			// btntan
			// 
			this->btntan->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btntan->Location = System::Drawing::Point(11, 157);
			this->btntan->Name = L"btntan";
			this->btntan->Size = System::Drawing::Size(91, 70);
			this->btntan->TabIndex = 28;
			this->btntan->Text = L"tan";
			this->btntan->UseVisualStyleBackColor = true;
			this->btntan->Click += gcnew System::EventHandler(this, &MyForm::btntan_Click);
			// 
			// btncot
			// 
			this->btncot->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btncot->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btncot->Location = System::Drawing::Point(108, 157);
			this->btncot->Name = L"btncot";
			this->btncot->Size = System::Drawing::Size(91, 70);
			this->btncot->TabIndex = 21;
			this->btncot->Text = L"cot";
			this->btncot->UseVisualStyleBackColor = true;
			this->btncot->Click += gcnew System::EventHandler(this, &MyForm::btncot_Click);
			// 
			// btncosh
			// 
			this->btncosh->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btncosh->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btncosh->Location = System::Drawing::Point(205, 81);
			this->btncosh->Name = L"btncosh";
			this->btncosh->Size = System::Drawing::Size(91, 70);
			this->btncosh->TabIndex = 20;
			this->btncosh->Text = L"cosh";
			this->btncosh->UseVisualStyleBackColor = true;
			this->btncosh->Click += gcnew System::EventHandler(this, &MyForm::btncosh_Click);
			// 
			// btnsinh
			// 
			this->btnsinh->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnsinh->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnsinh->Location = System::Drawing::Point(205, 5);
			this->btnsinh->Name = L"btnsinh";
			this->btnsinh->Size = System::Drawing::Size(91, 70);
			this->btnsinh->TabIndex = 11;
			this->btnsinh->Text = L"sinh";
			this->btnsinh->UseVisualStyleBackColor = true;
			this->btnsinh->Click += gcnew System::EventHandler(this, &MyForm::btnsinh_Click);
			// 
			// btncsc
			// 
			this->btncsc->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btncsc->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btncsc->Location = System::Drawing::Point(108, 5);
			this->btncsc->Name = L"btncsc";
			this->btncsc->Size = System::Drawing::Size(91, 70);
			this->btncsc->TabIndex = 10;
			this->btncsc->Text = L"csc";
			this->btncsc->UseVisualStyleBackColor = true;
			this->btncsc->Click += gcnew System::EventHandler(this, &MyForm::btncsc_Click);
			// 
			// textBox1
			// 
			this->textBox1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 19.8F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->textBox1->Location = System::Drawing::Point(29, 25);
			this->textBox1->Multiline = true;
			this->textBox1->Name = L"textBox1";
			this->textBox1->Size = System::Drawing::Size(867, 156);
			this->textBox1->TabIndex = 2;
			this->textBox1->TextAlign = System::Windows::Forms::HorizontalAlignment::Right;
			this->textBox1->Click += gcnew System::EventHandler(this, &MyForm::textBox1_Click);
			// 
			// pnlOntextBox1
			// 
			this->pnlOntextBox1->Controls->Add(this->textBox1);
			this->pnlOntextBox1->Location = System::Drawing::Point(-1, 0);
			this->pnlOntextBox1->Name = L"pnlOntextBox1";
			this->pnlOntextBox1->Size = System::Drawing::Size(926, 204);
			this->pnlOntextBox1->TabIndex = 51;
			// 
			// pnlcandt
			// 
			this->pnlcandt->Controls->Add(this->btnEnter);
			this->pnlcandt->Controls->Add(this->btnLeft);
			this->pnlcandt->Controls->Add(this->btnPLife1);
			this->pnlcandt->Controls->Add(this->btnRight);
			this->pnlcandt->Controls->Add(this->btnPRight1);
			this->pnlcandt->Controls->Add(this->button3);
			this->pnlcandt->Controls->Add(this->btnZ);
			this->pnlcandt->Controls->Add(this->btnRoot);
			this->pnlcandt->Controls->Add(this->btnRootV);
			this->pnlcandt->Controls->Add(this->btnPlus);
			this->pnlcandt->Controls->Add(this->btnMinus);
			this->pnlcandt->Controls->Add(this->btnDot);
			this->pnlcandt->Controls->Add(this->btn0);
			this->pnlcandt->Controls->Add(this->btnY);
			this->pnlcandt->Controls->Add(this->btnPow);
			this->pnlcandt->Controls->Add(this->btn3);
			this->pnlcandt->Controls->Add(this->btnMultipled);
			this->pnlcandt->Controls->Add(this->btn2);
			this->pnlcandt->Controls->Add(this->btn1);
			this->pnlcandt->Controls->Add(this->btnX);
			this->pnlcandt->Controls->Add(this->btnFraction);
			this->pnlcandt->Controls->Add(this->btn6);
			this->pnlcandt->Controls->Add(this->btnDevide);
			this->pnlcandt->Controls->Add(this->btn5);
			this->pnlcandt->Controls->Add(this->btn4);
			this->pnlcandt->Controls->Add(this->btnI);
			this->pnlcandt->Controls->Add(this->btnFactorial);
			this->pnlcandt->Controls->Add(this->btn9);
			this->pnlcandt->Controls->Add(this->btnDelete);
			this->pnlcandt->Controls->Add(this->btn8);
			this->pnlcandt->Controls->Add(this->btn7);
			this->pnlcandt->Controls->Add(this->btnPi);
			this->pnlcandt->Controls->Add(this->btnLn);
			this->pnlcandt->Controls->Add(this->btnLogV);
			this->pnlcandt->Controls->Add(this->btnLog);
			this->pnlcandt->Controls->Add(this->btnClear);
			this->pnlcandt->Controls->Add(this->pnlOntextBox1);
			this->pnlcandt->Controls->Add(this->pnlaj);
			this->pnlcandt->Controls->Add(this->pnlinverse);
			this->pnlcandt->Controls->Add(this->pnldet);
			this->pnlcandt->Controls->Add(this->pnlpd);
			this->pnlcandt->Controls->Add(this->pnlcalculus);
			this->pnlcandt->Controls->Add(this->pnltrigonmetry);
			this->pnlcandt->Controls->Add(this->pnlOnButtonmatrix);
			this->pnlcandt->Controls->Add(this->btnEqualsC);
			this->pnlcandt->Controls->Add(this->btnEqualsT);
			this->pnlcandt->Controls->Add(this->button1);
			this->pnlcandt->Location = System::Drawing::Point(255, 57);
			this->pnlcandt->Name = L"pnlcandt";
			this->pnlcandt->Size = System::Drawing::Size(924, 608);
			this->pnlcandt->TabIndex = 52;
			// 
			// btnPLife1
			// 
			this->btnPLife1->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnPLife1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnPLife1->Location = System::Drawing::Point(29, 510);
			this->btnPLife1->Name = L"btnPLife1";
			this->btnPLife1->Size = System::Drawing::Size(91, 70);
			this->btnPLife1->TabIndex = 37;
			this->btnPLife1->Text = L"←";
			this->btnPLife1->UseVisualStyleBackColor = true;
			this->btnPLife1->Click += gcnew System::EventHandler(this, &MyForm::BtnPLife_Click);
			// 
			// btnPRight1
			// 
			this->btnPRight1->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnPRight1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnPRight1->Location = System::Drawing::Point(127, 510);
			this->btnPRight1->Name = L"btnPRight1";
			this->btnPRight1->Size = System::Drawing::Size(91, 70);
			this->btnPRight1->TabIndex = 38;
			this->btnPRight1->Text = L"→";
			this->btnPRight1->UseVisualStyleBackColor = true;
			this->btnPRight1->Click += gcnew System::EventHandler(this, &MyForm::btnPRight_Click);
			// 
			// button3
			// 
			this->button3->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->button3->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->button3->Location = System::Drawing::Point(224, 510);
			this->button3->Name = L"button3";
			this->button3->Size = System::Drawing::Size(91, 70);
			this->button3->TabIndex = 10;
			this->button3->UseVisualStyleBackColor = true;
			// 
			// pnlaj
			// 
			this->pnlaj->Controls->Add(this->btnVariable2);
			this->pnlaj->Controls->Add(this->btnEqualVariable);
			this->pnlaj->Controls->Add(this->btnVariable1);
			this->pnlaj->Controls->Add(this->btnVariable3);
			this->pnlaj->Location = System::Drawing::Point(2, 2);
			this->pnlaj->Name = L"pnlaj";
			this->pnlaj->Size = System::Drawing::Size(919, 201);
			this->pnlaj->TabIndex = 55;
			// 
			// btnVariable2
			// 
			this->btnVariable2->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnVariable2->Location = System::Drawing::Point(318, 12);
			this->btnVariable2->Multiline = true;
			this->btnVariable2->Name = L"btnVariable2";
			this->btnVariable2->Size = System::Drawing::Size(187, 181);
			this->btnVariable2->TabIndex = 8;
			this->btnVariable2->Click += gcnew System::EventHandler(this, &MyForm::btnVariable2_Click);
			// 
			// btnEqualVariable
			// 
			this->btnEqualVariable->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnEqualVariable->Cursor = System::Windows::Forms::Cursors::IBeam;
			this->btnEqualVariable->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 28.2F, System::Drawing::FontStyle::Regular,
				System::Drawing::GraphicsUnit::Point, static_cast<System::Byte>(222)));
			this->btnEqualVariable->Location = System::Drawing::Point(542, 74);
			this->btnEqualVariable->Name = L"btnEqualVariable";
			this->btnEqualVariable->Size = System::Drawing::Size(91, 70);
			this->btnEqualVariable->TabIndex = 7;
			this->btnEqualVariable->Text = L"=";
			this->btnEqualVariable->UseVisualStyleBackColor = true;
			this->btnEqualVariable->Click += gcnew System::EventHandler(this, &MyForm::btnEqualVariable_Click);
			// 
			// btnVariable1
			// 
			this->btnVariable1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 18, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnVariable1->Location = System::Drawing::Point(30, 12);
			this->btnVariable1->Multiline = true;
			this->btnVariable1->Name = L"btnVariable1";
			this->btnVariable1->Size = System::Drawing::Size(255, 181);
			this->btnVariable1->TabIndex = 2;
			this->btnVariable1->Click += gcnew System::EventHandler(this, &MyForm::btnVariable1_Click);
			// 
			// btnVariable3
			// 
			this->btnVariable3->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnVariable3->Location = System::Drawing::Point(664, 12);
			this->btnVariable3->Multiline = true;
			this->btnVariable3->Name = L"btnVariable3";
			this->btnVariable3->Size = System::Drawing::Size(230, 181);
			this->btnVariable3->TabIndex = 1;
			// 
			// pnlinverse
			// 
			this->pnlinverse->Controls->Add(this->btnEqualInverse);
			this->pnlinverse->Controls->Add(this->btnInverse1);
			this->pnlinverse->Controls->Add(this->btnInverse2);
			this->pnlinverse->Location = System::Drawing::Point(1, 2);
			this->pnlinverse->Name = L"pnlinverse";
			this->pnlinverse->Size = System::Drawing::Size(919, 201);
			this->pnlinverse->TabIndex = 54;
			// 
			// btnEqualInverse
			// 
			this->btnEqualInverse->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnEqualInverse->Cursor = System::Windows::Forms::Cursors::IBeam;
			this->btnEqualInverse->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 28.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnEqualInverse->Location = System::Drawing::Point(412, 63);
			this->btnEqualInverse->Name = L"btnEqualInverse";
			this->btnEqualInverse->Size = System::Drawing::Size(91, 70);
			this->btnEqualInverse->TabIndex = 7;
			this->btnEqualInverse->Text = L"=";
			this->btnEqualInverse->UseVisualStyleBackColor = true;
			this->btnEqualInverse->Click += gcnew System::EventHandler(this, &MyForm::btnEqualInverse_Click);
			// 
			// btnInverse1
			// 
			this->btnInverse1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 18, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnInverse1->Location = System::Drawing::Point(122, 8);
			this->btnInverse1->Multiline = true;
			this->btnInverse1->Name = L"btnInverse1";
			this->btnInverse1->Size = System::Drawing::Size(230, 181);
			this->btnInverse1->TabIndex = 2;
			this->btnInverse1->Click += gcnew System::EventHandler(this, &MyForm::btnInverse1_Click);
			// 
			// btnInverse2
			// 
			this->btnInverse2->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnInverse2->Location = System::Drawing::Point(564, 8);
			this->btnInverse2->Multiline = true;
			this->btnInverse2->Name = L"btnInverse2";
			this->btnInverse2->Size = System::Drawing::Size(230, 181);
			this->btnInverse2->TabIndex = 1;
			// 
			// pnldet
			// 
			this->pnldet->Controls->Add(this->btnEqualDet);
			this->pnldet->Controls->Add(this->btnDet1);
			this->pnldet->Controls->Add(this->btnDet2);
			this->pnldet->Location = System::Drawing::Point(1, 3);
			this->pnldet->Name = L"pnldet";
			this->pnldet->Size = System::Drawing::Size(919, 201);
			this->pnldet->TabIndex = 53;
			// 
			// btnEqualDet
			// 
			this->btnEqualDet->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnEqualDet->Cursor = System::Windows::Forms::Cursors::IBeam;
			this->btnEqualDet->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 28.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnEqualDet->Location = System::Drawing::Point(412, 63);
			this->btnEqualDet->Name = L"btnEqualDet";
			this->btnEqualDet->Size = System::Drawing::Size(91, 70);
			this->btnEqualDet->TabIndex = 7;
			this->btnEqualDet->Text = L"=";
			this->btnEqualDet->UseVisualStyleBackColor = true;
			this->btnEqualDet->Click += gcnew System::EventHandler(this, &MyForm::btnEqualDet_Click);
			// 
			// btnDet1
			// 
			this->btnDet1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 18, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnDet1->Location = System::Drawing::Point(122, 8);
			this->btnDet1->Multiline = true;
			this->btnDet1->Name = L"btnDet1";
			this->btnDet1->Size = System::Drawing::Size(230, 181);
			this->btnDet1->TabIndex = 2;
			this->btnDet1->Click += gcnew System::EventHandler(this, &MyForm::btnDet1_Click);
			// 
			// btnDet2
			// 
			this->btnDet2->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnDet2->Location = System::Drawing::Point(564, 8);
			this->btnDet2->Multiline = true;
			this->btnDet2->Name = L"btnDet2";
			this->btnDet2->Size = System::Drawing::Size(230, 181);
			this->btnDet2->TabIndex = 1;
			// 
			// pnlpd
			// 
			this->pnlpd->Controls->Add(this->MatrixCalculate);
			this->pnlpd->Controls->Add(this->btnEqualsMatrix);
			this->pnlpd->Controls->Add(this->Matrix2);
			this->pnlpd->Controls->Add(this->Matrix3);
			this->pnlpd->Controls->Add(this->Matrix1);
			this->pnlpd->Location = System::Drawing::Point(4, 5);
			this->pnlpd->Name = L"pnlpd";
			this->pnlpd->Size = System::Drawing::Size(919, 201);
			this->pnlpd->TabIndex = 52;
			// 
			// MatrixCalculate
			// 
			this->MatrixCalculate->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 22.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->MatrixCalculate->Location = System::Drawing::Point(264, 71);
			this->MatrixCalculate->Multiline = true;
			this->MatrixCalculate->Name = L"MatrixCalculate";
			this->MatrixCalculate->Size = System::Drawing::Size(75, 70);
			this->MatrixCalculate->TabIndex = 8;
			this->MatrixCalculate->TextAlign = System::Windows::Forms::HorizontalAlignment::Center;
			this->MatrixCalculate->Click += gcnew System::EventHandler(this, &MyForm::MatrixCalculate_Click);
			// 
			// btnEqualsMatrix
			// 
			this->btnEqualsMatrix->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnEqualsMatrix->Cursor = System::Windows::Forms::Cursors::IBeam;
			this->btnEqualsMatrix->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 28.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnEqualsMatrix->Location = System::Drawing::Point(581, 71);
			this->btnEqualsMatrix->Name = L"btnEqualsMatrix";
			this->btnEqualsMatrix->Size = System::Drawing::Size(75, 70);
			this->btnEqualsMatrix->TabIndex = 7;
			this->btnEqualsMatrix->Text = L"=";
			this->btnEqualsMatrix->UseVisualStyleBackColor = true;
			this->btnEqualsMatrix->Click += gcnew System::EventHandler(this, &MyForm::btnEqualsMatrix_Click);
			// 
			// Matrix2
			// 
			this->Matrix2->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 13.8F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->Matrix2->Location = System::Drawing::Point(345, 8);
			this->Matrix2->Multiline = true;
			this->Matrix2->Name = L"Matrix2";
			this->Matrix2->Size = System::Drawing::Size(230, 181);
			this->Matrix2->TabIndex = 2;
			this->Matrix2->Click += gcnew System::EventHandler(this, &MyForm::Matrix2_Click);
			// 
			// Matrix3
			// 
			this->Matrix3->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 13.8F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->Matrix3->Location = System::Drawing::Point(662, 8);
			this->Matrix3->Multiline = true;
			this->Matrix3->Name = L"Matrix3";
			this->Matrix3->Size = System::Drawing::Size(230, 181);
			this->Matrix3->TabIndex = 1;
			// 
			// Matrix1
			// 
			this->Matrix1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 13.8F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->Matrix1->Location = System::Drawing::Point(28, 8);
			this->Matrix1->Multiline = true;
			this->Matrix1->Name = L"Matrix1";
			this->Matrix1->Size = System::Drawing::Size(230, 181);
			this->Matrix1->TabIndex = 0;
			this->Matrix1->Click += gcnew System::EventHandler(this, &MyForm::Matrix1_Click);
			// 
			// pnlOnButtonmatrix
			// 
			this->pnlOnButtonmatrix->Controls->Add(this->btnspace2);
			this->pnlOnButtonmatrix->Controls->Add(this->btnShowVariable);
			this->pnlOnButtonmatrix->Controls->Add(this->btnShowMatrix);
			this->pnlOnButtonmatrix->Controls->Add(this->button6);
			this->pnlOnButtonmatrix->Controls->Add(this->btnShowInverse);
			this->pnlOnButtonmatrix->Controls->Add(this->button11);
			this->pnlOnButtonmatrix->Controls->Add(this->btnShowDet);
			this->pnlOnButtonmatrix->Location = System::Drawing::Point(3, 277);
			this->pnlOnButtonmatrix->Name = L"pnlOnButtonmatrix";
			this->pnlOnButtonmatrix->Size = System::Drawing::Size(318, 236);
			this->pnlOnButtonmatrix->TabIndex = 53;
			// 
			// btnspace2
			// 
			this->btnspace2->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnspace2->Location = System::Drawing::Point(27, 157);
			this->btnspace2->Name = L"btnspace2";
			this->btnspace2->Size = System::Drawing::Size(285, 70);
			this->btnspace2->TabIndex = 48;
			this->btnspace2->Text = L"space";
			this->btnspace2->UseVisualStyleBackColor = true;
			this->btnspace2->Click += gcnew System::EventHandler(this, &MyForm::btnspace2_Click);
			// 
			// btnShowVariable
			// 
			this->btnShowVariable->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 10.8F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnShowVariable->Location = System::Drawing::Point(27, 81);
			this->btnShowVariable->Name = L"btnShowVariable";
			this->btnShowVariable->Size = System::Drawing::Size(91, 70);
			this->btnShowVariable->TabIndex = 47;
			this->btnShowVariable->Text = L"Variable Matrix";
			this->btnShowVariable->UseVisualStyleBackColor = true;
			this->btnShowVariable->Click += gcnew System::EventHandler(this, &MyForm::btnShowVariable_Click);
			// 
			// btnShowMatrix
			// 
			this->btnShowMatrix->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 13.8F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnShowMatrix->Location = System::Drawing::Point(27, 5);
			this->btnShowMatrix->Name = L"btnShowMatrix";
			this->btnShowMatrix->Size = System::Drawing::Size(91, 70);
			this->btnShowMatrix->TabIndex = 30;
			this->btnShowMatrix->Text = L"Matrix";
			this->btnShowMatrix->UseVisualStyleBackColor = true;
			this->btnShowMatrix->Click += gcnew System::EventHandler(this, &MyForm::btnShowMatrix_Click);
			// 
			// button6
			// 
			this->button6->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->button6->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->button6->Location = System::Drawing::Point(221, 81);
			this->button6->Name = L"button6";
			this->button6->Size = System::Drawing::Size(91, 70);
			this->button6->TabIndex = 20;
			this->button6->UseVisualStyleBackColor = true;
			// 
			// btnShowInverse
			// 
			this->btnShowInverse->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnShowInverse->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 12, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnShowInverse->Location = System::Drawing::Point(221, 5);
			this->btnShowInverse->Name = L"btnShowInverse";
			this->btnShowInverse->Size = System::Drawing::Size(91, 70);
			this->btnShowInverse->TabIndex = 11;
			this->btnShowInverse->Text = L"Inverse";
			this->btnShowInverse->UseVisualStyleBackColor = true;
			this->btnShowInverse->Click += gcnew System::EventHandler(this, &MyForm::btnShowInverse_Click);
			// 
			// button11
			// 
			this->button11->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->button11->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->button11->Location = System::Drawing::Point(124, 81);
			this->button11->Name = L"button11";
			this->button11->Size = System::Drawing::Size(91, 70);
			this->button11->TabIndex = 10;
			this->button11->UseVisualStyleBackColor = true;
			// 
			// btnShowDet
			// 
			this->btnShowDet->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnShowDet->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 13.8F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnShowDet->Location = System::Drawing::Point(124, 5);
			this->btnShowDet->Name = L"btnShowDet";
			this->btnShowDet->Size = System::Drawing::Size(91, 70);
			this->btnShowDet->TabIndex = 10;
			this->btnShowDet->Text = L"Det";
			this->btnShowDet->UseVisualStyleBackColor = true;
			this->btnShowDet->Click += gcnew System::EventHandler(this, &MyForm::btnShowDet_Click);
			// 
			// btnEqualsT
			// 
			this->btnEqualsT->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->btnEqualsT->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->btnEqualsT->Location = System::Drawing::Point(611, 510);
			this->btnEqualsT->Name = L"btnEqualsT";
			this->btnEqualsT->Size = System::Drawing::Size(91, 70);
			this->btnEqualsT->TabIndex = 10;
			this->btnEqualsT->Text = L"=";
			this->btnEqualsT->UseVisualStyleBackColor = true;
			this->btnEqualsT->Click += gcnew System::EventHandler(this, &MyForm::btnEqualsT_Click);
			// 
			// button1
			// 
			this->button1->BackgroundImageLayout = System::Windows::Forms::ImageLayout::Zoom;
			this->button1->Font = (gcnew System::Drawing::Font(L"Microsoft Sans Serif", 16.2F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point,
				static_cast<System::Byte>(222)));
			this->button1->Location = System::Drawing::Point(611, 510);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(91, 70);
			this->button1->TabIndex = 10;
			this->button1->UseVisualStyleBackColor = true;
			// 
			// MyForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(8, 16);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->BackColor = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(224)), static_cast<System::Int32>(static_cast<System::Byte>(224)),
				static_cast<System::Int32>(static_cast<System::Byte>(224)));
			this->ClientSize = System::Drawing::Size(1180, 666);
			this->Controls->Add(this->pnlcandt);
			this->Controls->Add(this->pnlTopSize);
			this->Controls->Add(this->pnlLeftSize);
			this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::None;
			this->Location = System::Drawing::Point(50, 50);
			this->Name = L"MyForm";
			this->StartPosition = System::Windows::Forms::FormStartPosition::CenterScreen;
			this->Text = L"MyForm";
			this->pnlLeftSize->ResumeLayout(false);
			this->pnlcalculus->ResumeLayout(false);
			this->pnltrigonmetry->ResumeLayout(false);
			this->pnlOntextBox1->ResumeLayout(false);
			this->pnlOntextBox1->PerformLayout();
			this->pnlcandt->ResumeLayout(false);
			this->pnlaj->ResumeLayout(false);
			this->pnlaj->PerformLayout();
			this->pnlinverse->ResumeLayout(false);
			this->pnlinverse->PerformLayout();
			this->pnldet->ResumeLayout(false);
			this->pnldet->PerformLayout();
			this->pnlpd->ResumeLayout(false);
			this->pnlpd->PerformLayout();
			this->pnlOnButtonmatrix->ResumeLayout(false);
			this->ResumeLayout(false);

		}
#pragma endregion

		double first, second = first = 0;
		char Operator;
		TextBox^ focusedTextBox;
	
		//โค้ดออกเสียงทำขึ้นมา
		void SpeakZero() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("zero");
		}
		void SpeakOne() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("one");
		}
		void SpeakTwo() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Two");
		}
		void SpeakThree() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Three");
		}
		void SpeakFour() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Four");
		}
		void SpeakFive() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Five");
		}
		void SpeakSix() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Six");
		}
		void SpeakSeven() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Seven");
		}
		void SpeakEight() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Eigth");
		}
		void SpeakNine() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Nine");
		}
		void SpeakCalculus() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Function Calculus");
		}
		void SpeakTrigonmetry() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Function Trigonmetry");
		}
		void SpeakMetrix() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Function Metrix");
		}
		void SpeakClose() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Close");
		}
		void SpeakE() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("E");
		}
		void SpeakFact() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Factorail");
		}
		void SpeakPie() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Pie");
		}
		void SpeakLon() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Lon");
		}
		void SpeakSin() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Sin");
		}
		void SpeakCos() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Cos");
		}
		void SpeakTan() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Tan");
		}
		void SpeakCosec() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Cosec");
		}
		void SpeakSec() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Sec");
		}
		void SpeakCot() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Cot");
		}
		void SpeakSinh() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Sin h");
		}
		void SpeakCosh() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Cos h");
		}
		void SpeakTanh() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Tan h");
		}
		void SpeakFaction() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Faction");
		}
		void SpeakPow() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("pow");
		}
		void SpeakRoot() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Root");
		}
		void SpeakRootv() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Root V");
		}
		void SpeakLog() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("log");
		}
		void SpeakDelete() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Delete");
		}
		void SpeakClear() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Clear");
		}
		void SpeakPlus() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Plus");
		}
		void SpeakMinus() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Minus");
		}
		void SpeakMultipled() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Multipled");
		}
		void SpeakDevide() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Devide");
		}
		void SpeakLeft() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Left Parenthesis");
		}
		void SpeakRight() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Rigth Parenthesis");
		}
		void SpeakAnswer() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak(textBox1->Text);
		}
		void SpeakDot() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Dot");
		}
		void SpeakI() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("I");
		}
		void SpeakX() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("X");
		}
		void SpeakY() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Y");
		}
		void SpeakZ() {
			System::Speech::Synthesis::SpeechSynthesizer^ spi = gcnew System::Speech::Synthesis::SpeechSynthesizer(); // spi is the variable name
			spi->Speak("Z");
		}
		// func ตรวจว่าเป็นตัวอักษรตัวเลขหรือไม่
bool isOpran(char ch) {
	return std::isdigit(ch) || ch == '.';
}



double evaluateOpran(const std::string& opranStr) {
	return std::stod(opranStr);
}

int precedence(char op) {
	if (op == '+' || op == '-') return 1;
	if (op == '*' || op == '/') return 2;
	if (op == '^') return 3;
	return 0;
}

double power(double base, double exponent) {
	return std::pow(base, exponent);
}

double evaluateEqu(const std::string& equ) {
	std::stack<double> oprans;
	std::stack<char> optors;
	std::string opranStr; // ใช้เก็บเลข

	for (char ch : equ) {
		if (ch == ' ') continue; // ข้ามช่องว่าง
		else if (isOpran(ch)) {
			opranStr += ch; // เก็บเลข
		}
		else if (ch == '(') {
			optors.push(ch);
		}
		else if (ch == ')') {
			oprans.push(evaluateOpran(opranStr)); // เพิ่มเลขลง stack
			opranStr = ""; // รีเซ็ตค่า
			while (!optors.empty() && optors.top() != '(') {
				double b = oprans.top(); oprans.pop();
				double a = oprans.top(); oprans.pop();
				char op = optors.top(); optors.pop();
				if (op == '+') oprans.push(a + b);
				else if (op == '-') oprans.push(a - b);
				else if (op == '*') oprans.push(a * b);
				else if (op == '/') oprans.push(a / b);
				else if (op == '^') oprans.push(power(a, b));
				}
			if (!optors.empty()) optors.pop(); // ลบวงเล็บซ้ายทิ้ง
		}
		else {
			if (!opranStr.empty()) {
				oprans.push(evaluateOpran(opranStr)); // เพิ่มเลขหรือทศนิยมลงใน stack
				opranStr = ""; // รีเซ็ตค่า
			}
			while (!optors.empty() && precedence(ch) <= precedence(optors.top())) {
				double b = oprans.top(); oprans.pop();
				double a = oprans.top(); oprans.pop();
				char op = optors.top(); optors.pop();
				if (op == '+') oprans.push(a + b);
				else if (op == '-') oprans.push(a - b);
				else if (op == '*') oprans.push(a * b);
				else if (op == '/') oprans.push(a / b);
				else if (op == '^') oprans.push(power(a, b));
			}
			optors.push(ch);
		}
	}

if (!opranStr.empty()) {
	oprans.push(evaluateOpran(opranStr)); // เพิ่มเลขใน stack
}

while (!optors.empty()) {
	double b = oprans.top(); oprans.pop();
	double a = oprans.top(); oprans.pop();
	char op = optors.top(); optors.pop();
	if (op == '+') oprans.push(a + b);
	else if (op == '-') oprans.push(a - b);
	else if (op == '*') oprans.push(a * b);
	else if (op == '/') oprans.push(a / b);
	else if (op == '^') oprans.push(power(a, b));
}

	return oprans.top();
}

void sQuadratic(double a, double b, double c) {
	double dcmn = b * b - 4 * a * c;
	if (dcmn > 0) {
		double x1 = (-b + sqrt(dcmn)) / (2 * a);
		double x2 = (-b - sqrt(dcmn)) / (2 * a);
		MessageBox::Show("Roots: x1 = " + x1 + ", x2 = " + x2);
	}
	else if (dcmn == 0) {
		double x = -b / (2 * a);
		MessageBox::Show("Repeated root: x = " + x);
		textBox1->Text = x.ToString();
	}
	else {
		MessageBox::Show("No roots");
	}
}

void sCubic(double a, double b, double c, double d) {
	double q = (3 * a * c - b * b) / (9 * a * a);
	double r = (9 * a * b * c - 27 * a * a * d - 2 * b * b * b) / (54 * a * a * a);
	double dcmn = q * q * q + r * r;

	if (dcmn > 0) {
		double s = cbrt(r + sqrt(dcmn));
		double t = cbrt(r - sqrt(dcmn));
		double x1 = -b / (3 * a) + (s + t);
		MessageBox::Show("Root: x = " + x1);
		textBox1->Text = x1.ToString();
	}
	else if (dcmn == 0) {
		double x1 = -b / (3 * a) - 2 * cbrt(r);
		double x2 = -b / (3 * a) + cbrt(r);
		MessageBox::Show("Repeated root: x1 = x2 = " + x1 + "\nRoot: x3 = " + x2);
		textBox1->Text = x1.ToString();
	}
	else {
		double theta = acos(r / sqrt(-(q * q * q)));
		double x1 = -2 * sqrt(q) * cos(theta / 3) - b / (3 * a);
		double x2 = -2 * sqrt(q) * cos((theta + 2 * 3.14159265358979) / 3) - b / (3 * a);
		double x3 = -2 * sqrt(q) * cos((theta - 2 * 3.14159265358979) / 3) - b / (3 * a);
		MessageBox::Show("Root: x1 = " + x1 + "\nRoot: x2 = " + x2 + "\nRoot: x3 = " + x3);
	}
}

void sLinear(double a, double b) {
	if (a == 0) {
		if (b == 0) {
			MessageBox::Show("Infinite solutions");
		}
		else {
			MessageBox::Show("No solution");
		}
	}
	else {
		double x = -b / a;
		MessageBox::Show("Solution: x = " + x);
		textBox1->Text = x.ToString();
	}
}

private: System::Void btncalcules_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakCalculus));
	thread->Start();
	pnlOnButton->Height = btncalculus->Height;
	pnlOnButton->Top = btncalculus->Top;
	pnlcalculus->Visible = true;
	pnltrigonmetry->Visible = false;
	btnPLife->Visible = true;
	btnPRight->Visible = true;
	pnlOntextBox1->Visible = true;
	pnlOnButtonmatrix->Visible = false;
	pnlpd->Visible = false;
	pnlaj->Visible = false;
	pnldet->Visible = false;
	pnlinverse->Visible = false;
	btnEnter->Visible = true;
	btnEqualsC->Visible = true;
	btnEqualsT->Visible = false;
	button1->Visible = false;
}
private: System::Void btntrigonmetry_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakTrigonmetry));
	thread->Start();
	pnlOnButton->Height = btntrigonmetry->Height;
	pnlOnButton->Top = btntrigonmetry->Top;
	pnlcalculus->Visible = false;
	pnltrigonmetry->Visible = true;
	btnPLife->Visible = true;
	btnPRight->Visible = true;
	pnlOntextBox1->Visible = true;
	pnlOnButtonmatrix->Visible = false;
	pnlpd->Visible = false;
	pnlaj->Visible = false;
	pnldet->Visible = false;
	pnlinverse->Visible = false;
	btnEnter->Visible = false;
	btnEqualsT->Visible = true;
	btnEqualsC->Visible = false;
	button1->Visible = false;

}
private: System::Void btnmatrix_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakMetrix));
	thread->Start();
	pnlOnButton->Height = btnmatrix->Height;
	pnlOnButton->Top = btnmatrix->Top;
	pnlcalculus->Visible = false;
	pnltrigonmetry->Visible = false;
	btnPLife->Visible = false;
	btnPRight->Visible = false;
	pnlOnButtonmatrix->Visible = true;
	btnPLife->Visible = false;
	btnEnter->Visible = true;
	btnPRight->Visible = false;
	btnEqualsC->Visible = false;
	btnEqualsT->Visible = false;
	button1->Visible = true;
	
}
private: System::Void btnout_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakClose));
	thread->Start();
	this->Close();
}

private: System::Void btn1_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakOne));
	thread->Start();
	if (focusedTextBox != nullptr) {
		//if (focusedTextBox->Text == "0")
			//focusedTextBox->Clear();
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "1");
		focusedTextBox->SelectionStart = position + 1;
	}
}

private: System::Void btn2_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakTwo));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "2");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btn3_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakThree));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "3");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btn4_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakFour));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "4");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btn5_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakFive));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "5");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btn6_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakSix));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "6");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btn7_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakSeven));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "7");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btn8_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakEight));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "8");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btn9_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakNine));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "9");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btn0_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakZero));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "0");
		focusedTextBox->SelectionStart = position + 1;
	}
}	  

private: System::Void btnDelete_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakDelete));
	thread->Start();
	if (focusedTextBox->SelectionLength > 0)
	{
		// ถ้ามีข้อความถูกเลือก, ให้ลบข้อความนั้นออก
		int startIndex = focusedTextBox->SelectionStart;
		int length = focusedTextBox->SelectionLength;
		focusedTextBox->Text = focusedTextBox->Text->Remove(startIndex, length);
	}
	else if (focusedTextBox->SelectionStart > 0)
	{
		// ถ้าไม่มีข้อความถูกเลือก และมีตำแหน่ง cursor ที่มากกว่า 0
		// ให้ลบอักขระที่ตำแหน่งก่อนหน้า cursor
		int cursorPos = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Remove(cursorPos - 1, 1);
		focusedTextBox->SelectionStart = cursorPos - 1; // เลื่อน cursor ไปที่ตำแหน่งก่อนหน้า
	}
	else if (focusedTextBox->Text->Length > 0)//ลบตัวขวาสุด
	{
		focusedTextBox->Text = focusedTextBox->Text->Remove(focusedTextBox->Text->Length - 1, 1);
	}

}

private: System::Void btnClear_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakClear));
	thread->Start();

	textBox1->Clear();
	MatrixCalculate->Clear();
	Matrix1->Clear();
	Matrix2->Clear();
	btnDet1->Clear();
	btnInverse1->Clear();
	btnVariable1->Clear();
	btnVariable2->Clear();
	Operator = ' ';

}

private: System::Void btnPlus_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakPlus));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "+");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnMinus_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakMinus));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "-");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnMultipled_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakMultipled));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "*");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnDevide_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakDevide));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "/");
		focusedTextBox->SelectionStart = position + 1;
	}
}

private: System::Void btnLeft_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakLeft));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "(");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnRight_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakRight));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, ")");
		focusedTextBox->SelectionStart = position + 1;
	}
}



private: System::Void btnEquals_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakAnswer));
	thread->Start();
	


	String^ input = textBox1->Text;

	if (input->Contains(" ")) {
		// กรณีมีช่องว่าง
		textBox1->Text = "";

		array<String^>^ values = input->Split(' ');

		int count = values->Length;
		if (count == 2) {
			// กรณีมี 2 ค่า
			double a = Convert::ToDouble(values[0]);
			double b = Convert::ToDouble(values[1]);
			sLinear(a, b);
		}
		else if (count == 3) {
			// กรณีมี 3 ค่า
			double a = Convert::ToDouble(values[0]);
			double b = Convert::ToDouble(values[1]);
			double c = Convert::ToDouble(values[2]);
			sQuadratic(a, b, c);
		}
		else if (count == 4) {
			// กรณีมี 4 ค่า
			double a = Convert::ToDouble(values[0]);
			double b = Convert::ToDouble(values[1]);
			double c = Convert::ToDouble(values[2]);
			double d = Convert::ToDouble(values[3]);
			sCubic(a, b, c, d);
		}
		else {
			// กรณีไม่เข้าเงื่อนไข
			textBox1->Text = "Invalid input";
		}
	}
	else if (input->Contains("e^")) {
		// กรณีมี "e^"
		int index = input->IndexOf("e^") + 2; // เพิ่ม 2 เพื่อให้ index เริ่มต้นที่ตัวเลขที่ต้องการยกกำลัง
		String^ exponentString = input->Substring(index); // เลือกส่วนของข้อความที่เป็นที่ยกกำลัง
		double exponent = Double::Parse(exponentString); // แปลงเป็นเลขที่จะใช้ในการยกกำลัง

		double result = Math::Pow(2.71828, exponent); // คำนวณค่า e^exponent

		MessageBox::Show(L" ผลลัพธ์ " + result);
	}
	else if (input->Contains("^")) {
		// กรณีมี "^"
		array<String^>^ parts = input->Split('^');

		if (parts->Length == 2) {
			// กรณีมี 2 ส่วนหลักและกำลัง
			double baseNumber = Convert::ToDouble(parts[0]);
			double exponent = Convert::ToDouble(parts[1]);

			double result = Math::Pow(baseNumber, exponent);

			String^ resultMessage = L"เลขฐาน: " + baseNumber.ToString() + L"\nเลขยกกำลัง: " + exponent.ToString() + L"\nผลลัพธ์: " + result.ToString();
			MessageBox::Show(resultMessage);

			textBox1->Text = result.ToString();
		}
	}
	else if (input->Contains("!")) {
		// กรณีมี "!"
		int index = input->IndexOf("!");
		String^ numberString = input->Substring(0, index);
		int number = Int32::Parse(numberString);

		int result = 1;
		for (int i = number; i >= 1; i--) {
			result *= i;
		}

		MessageBox::Show(L" ผลลัพธ์ " + result);
		textBox1->Text = result.ToString();
	}
	else if (input->Contains("log(") && input->Contains(")")) {
		// กรณีมี "log(" และ ")"
		int startIndex = input->IndexOf("log(") + 4; // เพิ่ม 4 เพื่อข้ามตัวอักษร "log("
		int endIndex = input->LastIndexOf(')');

		if (endIndex > startIndex) {
			String^ baseLog = input->Substring(startIndex, endIndex - startIndex);
			String^ valueLog = input->Substring(endIndex + 1); // เพิ่มการข้ามเครื่องหมาย ")"

			double baseLogValue = Convert::ToDouble(baseLog);
			double valueLogValue = Convert::ToDouble(valueLog);

			double result = log(valueLogValue) / log(baseLogValue);

			String^ resultMessage = L"ฐาน: " + baseLog + L"\nค่า log: " + valueLog + L"\nผลลัพธ์: " + result.ToString();
			MessageBox::Show(resultMessage);

			textBox1->Text = result.ToString();
		}
	}
	else if (input->Contains("(") && input->Contains(")")) {
		// กรณีมี "(" และ ")"
		int startIndex = input->IndexOf('(');
		int endIndex = input->LastIndexOf(')');

		if (endIndex > startIndex) {
			String^ baseRoot = input->Substring(startIndex + 1, endIndex - startIndex - 1);
			String^ valueInRoot = input->Substring(endIndex + 2); // เพิ่มการข้ามเครื่องหมาย "√"

			double baseRootValue = Convert::ToDouble(baseRoot);
			double valueInRootValue = Convert::ToDouble(valueInRoot);

			double result = Math::Pow(valueInRootValue, 1.0 / baseRootValue);

			String^ resultMessage = L"รากที่ : " + baseRoot + L"\nของ: " + valueInRoot + L"\nผลลัพธ์: " + result.ToString();
			MessageBox::Show(resultMessage);

			textBox1->Text = result.ToString();
		}
	}
	else if (input->Contains(L"√")) {
		// กรณีมี "√"
		int index = input->IndexOf(L"√");
		String^ numberString = input->Substring(index + 1);
		double number = Double::Parse(numberString);

		double result = sqrt(number);

		MessageBox::Show(L" ผลลัพธ์ " + result);
		textBox1->Text = result.ToString();
	}
	else {
		System::String^ expression = textBox1->Text->Trim();
		std::string inputString = msclr::interop::marshal_as<std::string>(expression);

		// ตรวจสอบว่ามี i ในข้อความหรือไม่
		if (inputString.find('i') != std::string::npos) {
			std::regex re("(\\d+)\\s*\\+\\s*(\\d+)i");
			std::smatch match;
			std::string::const_iterator searchStart(inputString.cbegin());
			double totalReal = 0, totalImaginary = 0;

			while (std::regex_search(searchStart, inputString.cend(), match, re)) {
				double realPart = std::stod(match[1]);
				double imaginaryPart = std::stod(match[2]);

				totalReal += realPart;
				totalImaginary += imaginaryPart;

				searchStart = match.suffix().first;
			}

			// คำนวณมุม
			double angle = atan2(totalImaginary, totalReal);

			// แปลงมุมจากเรเดียนเป็นองศา (เพื่อความอ่านง่าย)
			double angleDegrees = angle * (180 / 3.14159265358979);

			String^ result = (totalReal.ToString() + "+" + totalImaginary.ToString() + "i");
			textBox1->Text = result + Environment::NewLine + Environment::NewLine+ Environment::NewLine;

			String^ resultAngle = angleDegrees.ToString() + L"°";
			textBox1->Text += resultAngle;
		}
		else {
			// ใช้ฟังก์ชัน evaluateEqu
			double result = evaluateEqu(inputString);

			String^ resultString = result.ToString();
			textBox1->Text = resultString;
		}
	}
}

void CalculateTrigonometricFunction(String^ expression, String^ function) {
	// ตัดคำหน้าออกเพื่อให้ได้ค่าที่ต้องการคำนวณ
	String^ valueString = expression->Substring(function->Length + 1, expression->Length - function->Length - 2);
	double value = System::Convert::ToDouble(valueString);

	// ดำเนินการคำนวณค่าตามฟังก์ชันที่ระบุ (sin, cos, หรือ tan)
	double result;
	if (function == "sin") {
		result = Math::Sin(value);
	}
	else if (function == "cos") {
		result = Math::Cos(value);
	}
	else if (function == "tan") {
		result = Math::Tan(value);
	}
	else if (function == "cosec") {
		result = 1.0 / Math::Sin(value);
	}
	else if (function == "sec") {
		result = 1.0 / Math::Cos(value);
	}
	else if (function == "cot") {
		result = 1.0 / Math::Tan(value);
	}
	else if (function == "sinh") {
		result = Math::Sinh(value);
	}
	else if (function == "cosh") {
		result = Math::Cosh(value);
	}
	else if (function == "tanh") {
		result = Math::Tanh(value);
	}
	else if (function == "log") {
		result = Math::Log10(value);
	}
	else if (function == "ln") {
		result = log(value);
	}

	// แสดงผลลัพธ์ใน textBox1
	textBox1->Text = System::Convert::ToString(result);


}




private: System::Void btnsin_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakSin));
	thread->Start();
	textBox1->Text += "sin(";
}
private: System::Void btncos_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakCos));
	thread->Start();
	textBox1->Text += "cos(";
}
private: System::Void btntan_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakTan));
	thread->Start();
	textBox1->Text += "tan(";
}
private: System::Void btncsc_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakCosec));
	thread->Start();
	textBox1->Text += "cosec(";
}
private: System::Void btnsec_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakSec));
	thread->Start();
	textBox1->Text += "sec(";
}
private: System::Void btncot_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakCot));
	thread->Start();
	textBox1->Text += "cot(";

}
private: System::Void btnsinh_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakSinh));
	thread->Start();
	textBox1->Text += "sinh(";
}
private: System::Void btncosh_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakCosh));
	thread->Start();
	textBox1->Text += "cosh(";

}
private: System::Void btntanh_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakTanh));
	thread->Start();
	textBox1->Text += "tanh(";
}

private: System::Void btnLog_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakLog));
	thread->Start();
	textBox1->Text += "log(";
}
private: System::Void btnLn_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakLon));
	thread->Start();
	textBox1->Text += "ln(";

}
private: System::Void btnPi_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakPie));
	thread->Start();
	if (textBox1->Text == "0")
		textBox1->Clear();
	textBox1->Text += Math::PI.ToString();
}
private: System::Void btnE_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakE));
	thread->Start();
	int position = textBox1->SelectionStart;
	textBox1->Text = textBox1->Text->Insert(position, "2.71828182845905");
	textBox1->SelectionStart = position + 1;

}
private: System::Void btnFactorial_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakFact));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "!");
		focusedTextBox->SelectionStart = position + 1;
	}
}

private: System::Void Complex_Click(System::Object^ sender, System::EventArgs^ e) {
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "/");
		focusedTextBox->SelectionStart = position + 1;
	}

}

private: System::Void btnPow_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakPow));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "^");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnRoot_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakRoot));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, L"√");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnRootV_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakRootv));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, L"√");
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, ")");
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "(");
		focusedTextBox->SelectionStart = position + 1;
	}
}
	   
private: System::Void btnLogV_Click(System::Object^ sender, System::EventArgs^ e) {
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, ")");
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "(");
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "log");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnDot_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakDot));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, ".");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void BtnPLife_Click(System::Object^ sender, System::EventArgs^ e) {
	// โฟกัสที่ TextBox
	textBox1->Focus();

	// ส่งคีย์บอร์ดซึ่งไม่ทำอะไร โดยเรียกใช้งานงานก่อนทั้งหมดใน TextBox
	SendKeys::Send("{LEFT}");
}
private: System::Void btnPRight_Click(System::Object^ sender, System::EventArgs^ e) {
	// โฟกัสที่ TextBox
	textBox1->Focus();

	// ส่งคีย์บอร์ดเพื่อเลื่อนไปทางขวา
	SendKeys::Send("{RIGHT}");
}
private: System::Void btnEV_Click(System::Object^ sender, System::EventArgs^ e) {
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "e^");
		focusedTextBox->SelectionStart = position + 1;
	}
}

private: System::Void btnmoveon_Click(System::Object^ sender, System::EventArgs^ e) {

}
private: System::Void btnmovedown_Click(System::Object^ sender, System::EventArgs^ e) {

}
	   
private: System::Void btnmoveleft_Click(System::Object^ sender, System::EventArgs^ e) {
	
}
	
private: System::Void btnmoveright_Click(System::Object^ sender, System::EventArgs^ e) {
	

}

private: System::Void textBox1_Click(System::Object^ sender, System::EventArgs^ e) {
	focusedTextBox = textBox1;
}

private: System::Void btnI_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakI));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "i");
		focusedTextBox->SelectionStart = position + 1;
	}
}

private: System::Void btnX_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakX));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "x");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnY_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakY));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "y");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnZ_Click(System::Object^ sender, System::EventArgs^ e) {
	System::Threading::Thread^ thread = gcnew System::Threading::Thread(gcnew System::Threading::ThreadStart(this, &MyForm::SpeakZ));
	thread->Start();
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, "z");
		focusedTextBox->SelectionStart = position + 1;
	}
}

// ฟังก์ชันสำหรับแปลงข้อความใน TextBox เป็นเมทริกซ์
void ConvertTextToMatrix(String^ text, double matrix[][20], int& row, int& col) {
	array<String^>^ lines = text->Split(Environment::NewLine->ToCharArray(), StringSplitOptions::RemoveEmptyEntries);
	row = lines->Length;
	col = 0;
	for (int i = 0; i < row; i++) {
		array<String^>^ elements = lines[i]->Split(' ');
		col = Math::Max(col, elements->Length);
		for (int j = 0; j < elements->Length; j++) {
			matrix[i][j] = Convert::ToDouble(elements[j]);
		}
	}
}

// ฟังก์ชันสำหรับแปลงเมทริกซ์เป็นข้อความ
String^ ConvertMatrixToText(double matrix[][20], int row, int col) {
	String^ resultText = "";
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < col; j++) {
			resultText += matrix[i][j].ToString() + " ";
		}
		resultText += Environment::NewLine;
	}
	return resultText;
}

// ฟังก์ชันสำหรับดำเนินการตามเงื่อนไขที่กำหนด
void PerformOperation(String^ operation, double a[][20], double b[][20], double ans[][20], int row, int col1, int col2) {
	if (operation == "+") {
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col1; j++) {
				ans[i][j] = a[i][j] + b[i][j];
			}
		}
	}
	else if (operation == "-") {
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col1; j++) {
				ans[i][j] = a[i][j] - b[i][j];
			}
		}
	}
	else if (operation == "*") {
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col2; j++) {
				for (int k = 0; k < col1; k++) {
					ans[i][j] += a[i][k] * b[k][j];
				}
			}
		}
	}
}

private: System::Void btnEqualsMatrix_Click(System::Object^ sender, System::EventArgs^ e) {
	// เรียกใช้ฟังก์ชันหลักหรือโค้ดที่ทำงานเมื่อกดปุ่ม btnEqualMatrix และแสดงผลลัพธ์ใน Matrix3
	String^ operation = MatrixCalculate->Text->Trim();
	double a[20][20], b[20][20], ans[20][20] = { 0 }; // เมทริกซ์ A, B และผลลัพธ์
	int rowA, colA, rowB, colB; // ขนาดของเมทริกซ์ A และ B

	// รับค่าเมทริกซ์ A จาก textBox ชื่อ Matrix1 และแปลงเป็นเมทริกซ์
	ConvertTextToMatrix(Matrix1->Text, a, rowA, colA);

	// รับค่าเมทริกซ์ B จาก textBox ชื่อ Matrix2 และแปลงเป็นเมทริกซ์
	ConvertTextToMatrix(Matrix2->Text, b, rowB, colB);

	// ตรวจสอบขนาดของเมทริกซ์
	if (operation == "+" || operation == "-") {
		if (rowA != rowB || colA != colB) {
			MessageBox::Show("Matrix dimensions must be equal for addition or subtraction.");
			return;
		}
	}
	else if (operation == "*") {
		if (colA != rowB) {
			MessageBox::Show("Number of columns in Matrix A must be equal to number of rows in Matrix B for multiplication.");
			return;
		}
	}

	// ดำเนินการตามเงื่อนไขที่กำหนด
	PerformOperation(operation, a, b, ans, rowA, colA, colB);

	// แปลงเมทริกซ์ผลลัพธ์เป็นข้อความและแสดงใน TextBox 3
	Matrix3->Text = ConvertMatrixToText(ans, rowA, colB);
}

double det(double a[][20], int row) {
	double ans = 0;
	double submt[20][20];

	if (row == 1) {
		return a[0][0];
	}
	else if (row == 2) {
		return a[0][0] * a[1][1] - a[0][1] * a[1][0];
	}
	else {
		for (int k = 0; k < row; k++) {
			int subi = 0;
			for (int i = 1; i < row; i++) {
				int subj = 0;
				for (int j = 0; j < row; j++) {
					if (j == k) continue;
					submt[subi][subj] = a[i][j];
					subj++;
				}
				subi++;
			}
			ans += (k % 2 == 0 ? 1 : -1) * a[0][k] * det(submt, row - 1);
		}
	}
	return ans;
}

private: System::Void btnEqualDet_Click(System::Object^ sender, System::EventArgs^ e) {
	double a[20][20];
	int rowA, colA;
	ConvertTextToMatrix(btnDet1->Text, a, rowA, colA);

	// ตรวจสอบว่าแถวและคอลัมน์ใน TextBox 1 เท่ากันหรือไม่
	if (rowA != colA) {
		btnDet2->Text = "Error: Rows and columns in Matrix A must be equal.";
		return;
	}

	// คำนวณ det ของเมทริกซ์ A
	double determinant = det(a, rowA);

	// แสดงผลลัพธ์ใน TextBox 3
	btnDet2->Text = "Determinant : " + determinant.ToString();
}

// ฟังก์ชัน adjoint
void adjoint(int row, double a[][20], double adj[][20]) {
	if (row == 2) {
		adj[0][0] = a[1][1];
		adj[0][1] = -a[0][1];
		adj[1][0] = -a[1][0];
		adj[1][1] = a[0][0];
	}
	else if (row == 3) {
		double cof[20][20];
		int cnt_k, cnt_l, one, two;

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				cnt_k = 0;
				one = two = 1;
				for (int k = 0; k < 3; k++) {
					if (k == i) continue;
					cnt_l = 0;
					for (int l = 0; l < 3; l++) {
						if (l == j) continue;

						if (cnt_k == cnt_l) one *= a[k][l];
						else two *= a[k][l];

						cnt_l++;
					}
					cnt_k++;
				}
				cof[i][j] = one - two;

				if ((i + j) % 2 == 1) cof[i][j] = cof[i][j] * (-1);
			}
		}

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				adj[i][j] = cof[j][i];
			}
		}
	}
}
// ฟังก์ชัน inverse
void inverse(int row, double det, double adj[][20]) {
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < row; j++) {
			adj[i][j] = adj[i][j] * (1.0 / det);
		}
	}
}

private: System::Void btnEqualInverse_Click(System::Object^ sender, System::EventArgs^ e) {
	double a[20][20];
	int rowA, colA;
	ConvertTextToMatrix(btnInverse1->Text, a, rowA, colA);

	// ตรวจสอบว่าแถวและคอลัมน์ใน TextBox 1 เท่ากันหรือไม่
	if (rowA != colA) {
		btnInverse2->Text = "Error: Rows and columns in Matrix A must be equal.";
		return;
	}

	// สร้างเมทริกซ์ adjoint
	double adj[20][20];
	adjoint(rowA, a, adj);

	// คำนวณ det ของเมทริกซ์ A
	double determinant = det(a, rowA);

	// คำนวณ inverse ของเมทริกซ์ A
	inverse(rowA, determinant, adj);

	// แสดงผลลัพธ์ใน TextBox 3
	btnInverse2->Text = "Inverse : \r\n";
	for (int i = 0; i < rowA; i++) {
		for (int j = 0; j < rowA; j++) {
			btnInverse2->Text += adj[i][j].ToString() + " ";
		}
		btnInverse2->Text += "\r\n";
	}

}

void multiplyMatrix(int row1, int col1, int col2, double a[][20], double b[][20], double ans[][20]) {
	for (int i = 0; i < row1; i++) {
		for (int j = 0; j < col2; j++) {
			for (int k = 0; k < col1; k++) {
				ans[i][j] += a[i][k] * b[k][j];
			}
		}
	}
}

private: System::Void btnEqualVariable_Click(System::Object^ sender, System::EventArgs^ e) {
	// ดึงข้อความจาก TextBox 1 และแปลงเป็นเมทริกซ์ A
	double a[20][20];
	int rowA, colA;
	ConvertTextToMatrix(btnVariable1->Text, a, rowA, colA);

	// ดึงข้อความจาก TextBox 3 และแปลงเป็นเมทริกซ์ B
	double b[20][20];
	int rowB, colB;
	ConvertTextToMatrix(btnVariable2->Text, b, rowB, colB);

	// คำนวณ inverse matrix ของ A
	double adjA[20][20];
	adjoint(rowA, a, adjA);

	double detA = det(a, rowA);
	inverse(rowA, detA, adjA);

	// คำนวณผลลัพธ์ของ inverse(A) * B
	double result[20][20];
	multiplyMatrix(rowA, colA, colB, adjA, b, result);

	// แสดงผลลัพธ์ใน TextBox 4
	if (rowA == 1) {
		// สมการเชิงเส้นเป็นระบบสมการ 1 สมการ 1 ตัวแปร
		// แสดงผลลัพธ์ในรูปแบบ x = ...
		btnVariable3->Text = "x = " + result[0][0].ToString() + "\r\n";

	}
	// แสดงผลลัพธ์ใน TextBox 4
	else if (rowA == 2) {
		// สมการเชิงเส้นเป็นระบบสมการ 2 สมการ 2 ตัวแปร
		// แสดงผลลัพธ์ในรูปแบบ x = ..., y = ...
		btnVariable3->Text = "x = " + result[0][0].ToString() + "\r\n";
		btnVariable3->Text += "y = " + result[1][0].ToString() + "\r\n";
	}
	else if (rowA == 3) {
		// สมการเชิงเส้นเป็นระบบสมการ 3 สมการ 2 ตัวแปร
		// แสดงผลลัพธ์ในรูปแบบ x = ..., y = ...
		btnVariable3->Text = "x = " + result[0][0].ToString() + "\r\n";
		btnVariable3->Text += "y = " + result[1][0].ToString() + "\r\n";
		btnVariable3->Text += "z = " + result[2][0].ToString() + "\r\n";
	}
}
private: System::Void btnShowMatrix_Click(System::Object^ sender, System::EventArgs^ e) {
	
	pnlpd->Visible = true;
	pnlaj->Visible = false;
	pnlOntextBox1->Visible = false;
	pnldet->Visible = false;
	pnlinverse->Visible = false;

}
private: System::Void btnShowDet_Click(System::Object^ sender, System::EventArgs^ e) {
	pnlpd->Visible = false;
	pnlaj->Visible = false;
	pnlOntextBox1->Visible = false;
	pnldet->Visible = true;
	pnlinverse->Visible = false;
}
private: System::Void btnShowInverse_Click(System::Object^ sender, System::EventArgs^ e) {
	pnlpd->Visible = false;
	pnlaj->Visible = false;
	pnlOntextBox1->Visible = false;
	pnldet->Visible = false;
	pnlinverse->Visible = true;
}
private: System::Void btnShowVariable_Click(System::Object^ sender, System::EventArgs^ e) {
	pnlpd->Visible = false;
	pnlaj->Visible = true;
	pnlOntextBox1->Visible = false;
	pnldet->Visible = false;
	pnlinverse->Visible = false;
}
private: System::Void MatrixCalculate_Click(System::Object^ sender, System::EventArgs^ e) {
	focusedTextBox = MatrixCalculate;
}
private: System::Void Matrix1_Click(System::Object^ sender, System::EventArgs^ e) {
	focusedTextBox = Matrix1;
}
private: System::Void Matrix2_Click(System::Object^ sender, System::EventArgs^ e) {
	focusedTextBox = Matrix2;
}
private: System::Void btnDet1_Click(System::Object^ sender, System::EventArgs^ e) {
	focusedTextBox = btnDet1;
}
private: System::Void btnInverse1_Click(System::Object^ sender, System::EventArgs^ e) {
	focusedTextBox = btnInverse1;
}
private: System::Void btnVariable1_Click(System::Object^ sender, System::EventArgs^ e) {
	focusedTextBox = btnVariable1;
}
private: System::Void btnVariable2_Click(System::Object^ sender, System::EventArgs^ e) {
	focusedTextBox = btnVariable2;
}
private: System::Void btnspace1_Click(System::Object^ sender, System::EventArgs^ e) {
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, " ");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnspace2_Click(System::Object^ sender, System::EventArgs^ e) {
	if (focusedTextBox != nullptr) {
		int position = focusedTextBox->SelectionStart;
		focusedTextBox->Text = focusedTextBox->Text->Insert(position, " ");
		focusedTextBox->SelectionStart = position + 1;
	}
}
private: System::Void btnEnter_Click(System::Object^ sender, System::EventArgs^ e) {
	// เพิ่มบรรทัดใหม่ใน focusedTextBox
	focusedTextBox->Text += Environment::NewLine;
}
private: System::Void btnEqualsT_Click(System::Object^ sender, System::EventArgs^ e) {
	String^ expression = textBox1->Text->Trim(); // ดึงข้อมูลที่ผู้ใช้ป้อนใน textBox1

	// ตรวจสอบว่ามีการป้อนข้อมูลหรือไม่
	if (expression->Length == 0) {
		// ถ้าไม่มีข้อมูลให้ไม่ดำเนินการใด ๆ และออกจากฟังก์ชัน
		return;
	}

	int openParenthesisCount = 0;
	int closeParenthesisCount = 0;
	for each (Char c in expression) {
		if (c == '(') {
			openParenthesisCount++;
		}
		else if (c == ')') {
			closeParenthesisCount++;
		}
	}

	if (openParenthesisCount != closeParenthesisCount) {
		textBox1->Text = "Error: Parentheses mismatch";
		return;
	}

	// ตรวจสอบว่าผู้ใช้ป้อนค่า sin(, cos( หรือ tan( หรือไม่
	if (expression->StartsWith("sin(")) {
		// หากเป็น sin( ให้ดำเนินการคำนวณค่า sin
		CalculateTrigonometricFunction(expression, "sin");
	}
	else if (expression->StartsWith("cos(")) {
		// หากเป็น cos( ให้ดำเนินการคำนวณค่า cos
		CalculateTrigonometricFunction(expression, "cos");
	}
	else if (expression->StartsWith("tan(")) {
		// หากเป็น tan( ให้ดำเนินการคำนวณค่า tan
		CalculateTrigonometricFunction(expression, "tan");
	}
	else if (expression->StartsWith("cosec(")) {
		CalculateTrigonometricFunction(expression, "cosec");
	}
	else if (expression->StartsWith("sec(")) {
		CalculateTrigonometricFunction(expression, "sec");
	}
	else if (expression->StartsWith("cot(")) {
		CalculateTrigonometricFunction(expression, "cot");
	}
	else if (expression->StartsWith("sinh(")) {
		CalculateTrigonometricFunction(expression, "sinh");
	}
	else if (expression->StartsWith("cosh(")) {
		CalculateTrigonometricFunction(expression, "cosh");
	}
	else if (expression->StartsWith("tanh(")) {
		CalculateTrigonometricFunction(expression, "tanh");
	}
	else if (expression->StartsWith("log(")) {
		CalculateTrigonometricFunction(expression, "log");
	}
	else if (expression->StartsWith("ln(")) {
		CalculateTrigonometricFunction(expression, "ln");
	}
	else if (expression == "e") {
		// แสดงค่าของ "e" ใน textBox1
		textBox1->Text = Math::E.ToString();
	}
}
};
}
