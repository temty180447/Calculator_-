public class SinglyLinkedList {
    Node head;
    String listName;
    
    public SinglyLinkedList(String name){
        this.listName = name;   
    }
    
    public void PopTail() {
	//START FIX HERE
        if (IsEmpty()){
            System.out.println("ERROR");
            
        }else if(head.next == null){
            head = null;
            
        }else{
            Node current = head;
            while(current.next.next != null){
                current = current.next;
            }
            current.next = null;
        }
        //END FIX HERE
    }
    
    public void PopHead(){
	//START FIX HERE
        if (IsEmpty()){
            System.out.println("ERROR");
        }else{
            head = head.next;
        }
        //END FIX HERE
    }
    
    public Node GetHead(){
	//START FIX HERE
        if (IsEmpty()){
            System.out.println("ERROR");
            return new Node("Empty List!");
        } else {
            return head;
        }
        //END FIX HERE
    }
    
    public Node GetTail(){ 
	//START FIX HERE
        if (IsEmpty()){
            System.out.println("ERROR");
            return new Node("Empty List!");
        } else {
            Node current = head;
            while(current.next != null){
                current = current.next;
            }
            return current;
        }
        //END FIX HERE
    }
    
    public void PushHead(Node node){
	//START FIX HERE
        if (IsEmpty()) {
            head = node;
        }
        else {
            node.next = head;
            head = node;
        }
        //END FIX HERE
    }
    
    public void PushTail(Node node) {
	//START FIX HERE
        if (IsEmpty()){
            head = node;
        } else {
            Node current = head;
            while(current.next != null){
	            current = current.next;
	        }
            current.next = node;
        }
        //END FIX HERE
    }

    public Node FindNode(int id){
	//START FIX HERE
        if (IsEmpty()) {
            return new Node("Empty List!");
        }
        else {
            Node current = head;
            while(current != null){
                if(current.heroId == id){
                    return current;
                }
                current = current.next;
            }
            return new Node("Hero Not Found!");
        }
        //END FIX HERE
    }
    
    public Node EraseNode(int id){
	//START FIX HERE
        if (IsEmpty()){
            System.out.println("ERROR");
            return new Node("Empty List!");
        } else if(head.heroId == id){
            Node tmp = head;
            head = head.next;
            return tmp;
        }
        else{
            Node current = head;
            Node tmp = null;
            while(current.next != null){
                if(current.next.heroId == id){
                    tmp = current.next;
                    current.next = current.next.next;
                    
                    return tmp;
                }
                current = current.next;
            }
            return new Node("Hero Not Found!");
        }
        //END FIX HERE
    }
    
    public void AddNodeAfter(Node node1, Node node2){
	//START FIX HERE
	        node2.next = node1.next;
	        node1.next = node2;
        //END FIX HERE
    }
    
    public void AddNodeBefore(Node node1, Node node2){
	//START FIX HERE
	    if(head == node1){
            node2.next = node1;
            head = node2;
        }
        else{
            Node current = head;
            while(current.next != node1){
                current = current.next;
            }
            node2.next = node1;
            current.next = node2;
        }
        //END FIX HERE
    }
    
    public boolean IsEmpty(){
	//START FIX HERE
        return head == null;
        //END FIX HERE
    }
    public void Merge(SinglyLinkedList list){
	//START FIX HERE
	    Node current = head;
	    while(current!= null){
	        if(current.next != null){
	            current = current.next;
	        }
	        else{
	            break;
	        }
	        
	    }
	    current.next = list.head;
        //END FIX HERE        
    }
    
    public void PrintStructure(){
        //START FIX HERE
        Node current = head;
        System.out.print(listName + ": head -> ");
        while(current!=null){
            System.out.print("{" + current.heroId + "} -> ");
            current = current.next;
        }
        System.out.println("null");
        //END FIX HERE
    }
    
    public Node GetHighestHPHero(){
        //START FIX HERE
        if (IsEmpty()) {
            return new Node("Empty List!");
        }
        else {
            Node current = head;
            Node theWinnerHp = current;
            
            while(current != null){
                if(current.hp >= theWinnerHp.hp){
                    theWinnerHp = current;
                }
                current = current.next;
            }
            return theWinnerHp;
        }
        //END FIX HERE
    }
    
    public double GetMiddleHP(){
        //START FIX HERE
        if(IsEmpty()){
            return 0.0;
            
        }
        
        int n = 0;
        Node current = head;
        while(current != null){
            n++;
            current = current.next;
            
        }
        
        current = head;
        int i = 0;
        if(n % 2 == 1){
            while(i != (n/2)){
                i++;
                current = current.next;
            }
            return current.next.hp;
        }
        else{
            while(i != (n/2)){
                i++;
                current = current.next;
            }
            return ((current.hp + current.next.hp) / 2); 
        }
            
        //END FIX HERE
    }

    public void PrintHeroWithType(Attribute att){
        if (IsEmpty()){
            System.out.println("Empty List!");
            return;
        }
        //START FIX HERE
        int n = 0;
        Node current = head;
        while(current != null){
            if(current.att == att){
                n++;
            }
            current = current.next;
        }
        
        if(n == 0){
		    System.out.println("There is no hero with this attribute");
        }
        
        else if(n == 1){
		    System.out.printf("Print Hero With This Attribute: %s has %d hero\n",att, n);
        }
        
        else if(n > 1){
		    System.out.printf("Print Hero With This Attribute: %s has %d heroes\n",att, n);
        }
        
        current = head;
        
        n = 1;
        while(current != null){
            
            if(current.att == att){
                System.out.println(n + ". " + "HeroID: " + current.heroId + " , Name: " + current.name +" , HP: " + current.hp + ", Attribute: " + current.att);
                n++;
            }
            current = current.next;

        }
        
        //END FIX HERE
    }
}
