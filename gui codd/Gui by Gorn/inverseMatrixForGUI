// ฟังก์ชันสำหรับแปลงข้อความใน TextBox เป็นเมทริกซ์
void ConvertTextToMatrix(String^ text, double matrix[][20], int& row, int& col) {
	array<String^>^ lines = text->Split(Environment::NewLine->ToCharArray(), StringSplitOptions::RemoveEmptyEntries);
	row = lines->Length;
	col = 0;
	for (int i = 0; i < row; i++) {
		array<String^>^ elements = lines[i]->Split(' ');
		if (col == 0) {
			col = elements->Length;
		}
		else if (col != elements->Length) {
			// แสดงข้อความ Error เมื่อจำนวนคอลัมน์ไม่เท่ากัน
			MessageBox::Show("Error: Number of columns in the matrix does not match.");
			return;
		}
		for (int j = 0; j < col; j++) {
			matrix[i][j] = Convert::ToDouble(elements[j]);
		}
	}
}

// ฟังก์ชัน adjoint
void adjoint(int row, double a[][20], double adj[][20]) {
	if (row == 2) {
		adj[0][0] = a[1][1];
		adj[0][1] = -a[0][1];
		adj[1][0] = -a[1][0];
		adj[1][1] = a[0][0];
	}
	else if (row == 3) {
		double cof[20][20];
		int cnt_k, cnt_l, one, two;

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				cnt_k = 0;
				one = two = 1;
				for (int k = 0; k < 3; k++) {
					if (k == i) continue;
					cnt_l = 0;
					for (int l = 0; l < 3; l++) {
						if (l == j) continue;

						if (cnt_k == cnt_l) one *= a[k][l];
						else two *= a[k][l];

						cnt_l++;
					}
					cnt_k++;
				}
				cof[i][j] = one - two;

				if ((i + j) % 2 == 1) cof[i][j] = cof[i][j] * (-1);
			}
		}

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				adj[i][j] = cof[j][i];
			}
		}
	}
}

double det(double a[][20], int row) {
	double ans = 0;
	double submt[20][20];

	if (row == 1) {
		return a[0][0];
	}
	else if (row == 2) {
		return a[0][0] * a[1][1] - a[0][1] * a[1][0];
	}
	else {
		for (int k = 0; k < row; k++) {
			int subi = 0;
			for (int i = 1; i < row; i++) {
				int subj = 0;
				for (int j = 0; j < row; j++) {
					if (j == k) continue;
					submt[subi][subj] = a[i][j];
					subj++;
				}
				subi++;
			}
			ans += (k % 2 == 0 ? 1 : -1) * a[0][k] * det(submt, row - 1);
		}
	}
	return ans;
}
	   
// ฟังก์ชัน inverse
void inverse(int row, double det, double adj[][20]) {
	for (int i = 0; i < row; i++) {
		for (int j = 0; j < row; j++) {
			adj[i][j] = adj[i][j] * (1.0 / det);
		}
	}
}

private: System::Void btnEqualMatrix_Click(System::Object^ sender, System::EventArgs^ e) {
	

	double a[20][20];
	int rowA, colA;	
	ConvertTextToMatrix(Matrix1->Text, a, rowA, colA);

	// ตรวจสอบว่าแถวและคอลัมน์ใน TextBox 1 เท่ากันหรือไม่
	if (rowA != colA) {
		Matrix3->Text = "Error: Rows and columns in Matrix A must be equal.";
		return;
	}

	// สร้างเมทริกซ์ adjoint
	double adj[20][20];
	adjoint(rowA, a, adj);

	// คำนวณ det ของเมทริกซ์ A
	double determinant = det(a, rowA);

	// คำนวณ inverse ของเมทริกซ์ A
	inverse(rowA, determinant, adj);

	// แสดงผลลัพธ์ใน TextBox 3
	Matrix3->Text = "Inverse of Matrix A: \r\n";
	for (int i = 0; i < rowA; i++) {
		for (int j = 0; j < rowA; j++) {
			Matrix3->Text += adj[i][j].ToString() + " ";
		}
		Matrix3->Text += "\r\n";
	}

}
