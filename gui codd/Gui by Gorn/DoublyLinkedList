public class DoublyLinkedList {
    Node head;
    Node tail;
    String listName;
    
    public DoublyLinkedList(String name){
        //START FIX HERE
        this.listName = name;
        //END FIX HERE
    }
    
    public void PopTail() {
        //START FIX HERE
        if (IsEmpty()) {
            System.out.println("ERROR");
        }
        else if(head.next == null){
            head = null;
            tail = null;
        }
        else {
            Node current = tail;
            tail = current.previous;
            tail.next = null;

        }
        //END FIX HERE
    }
    
    public void PopHead(){
        //START FIX HERE
        if (IsEmpty()) {
            System.out.println("ERROR");
        }
        else {
            Node current = head;
            head = current.next;
            head.previous = null;
        }
        //END FIX HERE
    }
    
    public Node GetHead(){
        //START FIX HERE
        if (IsEmpty()) {
            System.out.println("ERROR");
            return new Node("Empty List!");
        }
        else {
            return head;
        }
        //END FIX HERE
    }
    
    public Node GetTail(){
        //START FIX HERE
        if (IsEmpty()) {
            System.out.println("ERROR");
            return new Node("Empty List!");
        }
        else {
			return tail;
        }
        //END FIX HERE
    }
    
    public void PushHead(Node node){
        //START FIX HERE
        if (IsEmpty()) {
            head = node;
            tail = node;
        }
        else {
            node.next = head;
            head.previous = node;
            head = node;
        }
        //END FIX HERE
    }
    
    public void PushTail(Node node) {
        //START FIX HERE
        if (IsEmpty()) {
            head = node;
            tail = node;
        }
        else {
            node.previous = tail;
            tail.next = node;
            tail = node;
        }
        //END FIX HERE
    }

    public Node FindNode(int id){
        //START FIX HERE
        if (IsEmpty()) {
            return new Node("Empty List!");
        }
        else {
            Node current = head;
            while(current != null){
                if(current.heroId == id){
                    return current;
                }
            current = current.next;
            }
            return new Node("Hero Not Found!");
        }
        //END FIX HERE
    }
    
    public Node EraseNode(int id){
        //START FIX HERE
        if (IsEmpty()) {
            System.out.println("ERROR");
            return new Node("Empty List!");
        }
        else if(head.heroId == id){
            Node tmp = head;
            head = head.next;
            head.previous = null;
            return tmp;
        }
        else if(tail.heroId == id){
            Node tmp = tail;
            tail = tail.previous;
            tail.next = null;
            return tmp;
        }
        else {      
            Node current = head.next;
            Node tmp = null;
            while(current != tail){
                if(current.heroId == id){
                 current.previous.next = current.next;
                 current.next.previous = current.previous;
                 tmp = current;
                 tmp.next = null;
                 tmp.previous = null;
                 return tmp;
                }
                current = current.next;
            }
                        
            return new Node("Hero Not Found!");
        }
        //END FIX HERE
    }


    
    public void AddNodeAfter(Node node1, Node node2){
        //START FIX HERE
        if(tail == node1){
            node1.next = node2;
            node2.previous = node1;
            tail = node2;
        }
        else{
            node2.next = node1.next;
            node1.next = node2;
            
            Node current = node1.next;
            current.previous = node2;
            
            node2.previous = node1;
        }
        //END FIX HERE
    }
    
    public void AddNodeBefore(Node node1, Node node2){
        //START FIX HERE
        if(head == node1){
            node2.next = node1;
            node1.previous = node2;
            head = node2;
        }
        else{
            node2.next = node1;
            node2.previous = node1.previous;
            
            node1.previous = node2;
            node2.previous.next = node2;
        }
        //END FIX HERE
    }

    
    public boolean IsEmpty(){
        //START FIX HERE
        return head == null && tail == null;
        //END FIX HERE
    }
    public void Merge(DoublyLinkedList list){
        //START FIX HERE
        if (list.IsEmpty()) return;
        
        this.tail.next = list.head;
        list.head.previous = this.tail;
        
        tail = list.tail;

        //END FIX HERE
    }
    
    public void PrintStructure(){
        //START FIX HERE
        Node current=head;
        System.out.print(listName + ": head <-> ");
        while(current!=null){
            System.out.print("{" + current.heroId + "} <-> ");
            current = current.next;
        }
        System.out.println("tail");
        //END FIX HERE
    }
    
    // This may be useful for you for implementing printStructure()
    public void PrintStructureTailward(){ 
        Node current=tail;
        System.out.print(listName + ": tail <-> ");
        while(current!=null){
            System.out.print("{" + current.heroId + "} <-> ");
            current = current.previous;
        }
        System.out.println("head");
    }
    
    public Node GetHighestHPHero(){
        //START FIX HERE
        if (IsEmpty()) {
            return new Node("Empty List!");
        }
        else {
            Node current = head;
            Node theWinnerHp = current;
            
            while(current != null){
                if(current.hp >= theWinnerHp.hp){
                    theWinnerHp = current;
                }
                current = current.next;
            }
            return theWinnerHp;
        }
        //END FIX HERE
    }

    public double GetMiddleHP(){
        //START FIX HERE
        if(IsEmpty()){
            return 0.0;
            
        }
        
        int n = 0;
        Node current = head;
        while(current != null){
            n++;
            current = current.next;
            
        }
        
        current = head;
        int i = 1;
        if(n % 2 == 1){
            while(i != (n/2) + 1){
                i++;
                current = current.next;
            }
            return current.hp;
        }
        else{
            while(i != (n/2)){
                i++;
                current = current.next;
            }
            return ((current.hp + current.next.hp) / 2); 
        }
            
        //END FIX HERE
    }
    public void PrintHeroWithType(Attribute att){
        if (IsEmpty()){
            System.out.println("Empty List!");
            return;
        }
        //START FIX HERE
        int n = 0;
        Node current = head;
        while(current != null){
            if(current.att == att){
                n++;
            }
            current = current.next;
        }
        
        if(n == 0){
		    System.out.println("There is no hero with this attribute");
        }
        
        else if(n == 1){
		    System.out.printf("Print Hero With This Attribute: %s has %d hero\n",att, n);
        }
        
        else if(n > 1){
		    System.out.printf("Print Hero With This Attribute: %s has %d heroes\n",att, n);
        }
        
        current = head;
        
        while(current != null){
            
            if(current.att == att){
                System.out.println(n + ". " + "HeroID: " + current.heroId + " , Name: " + current.name +" , HP: " + current.hp + ", Attribute: " + current.att);
                n--;
            }
            current = current.next;

        }
        
        //END FIX HERE
    }
}

