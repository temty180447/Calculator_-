#include <iostream>
#include <sstream>
#include <cmath>
#include <regex>
#include <stack>
#include <string>
#include <cctype>
#include <msclr/marshal_cppstd.h>

String^ input = textBox1->Text; // รับข้อความจาก TextBox
std::string inputString = msclr::interop::marshal_as<std::string>(input); // แปลง String^ เป็น string
double result = evaluateEqu(inputString);

// แปลงผลลัพธ์เป็น String^ เพื่อแสดงบน TextBox
String^ resultString = result.ToString();
textBox1->Text = resultString;

// func ตรวจว่าเป็นตัวอักษรตัวเลขหรือไม่
bool isOpran(char ch) {
    return std::isdigit(ch) || ch == '.';
}
double evaluateOpran(const std::string& opranStr) {
    return std::stod(opranStr);
}

int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    if (op == '^') return 3;
    return 0;
}

double power(double base, double exponent) {
    return std::pow(base, exponent);
}

double evaluateEqu(const std::string& equ) {
    std::stack<double> oprans;
    std::stack<char> optors;

    std::string opranStr; // ใช้เก็บเลข
    for (char ch : equ) {
        if (ch == ' ') continue; // ข้ามช่องว่าง
        else if (isOpran(ch)) {
            opranStr += ch; // เก็บเลข
        } 
        else if (ch == '(') {
            optors.push(ch);
        } 
        else if (ch == ')') {
            oprans.push(evaluateOpran(opranStr)); // เพิ่มเลขลง stack
            opranStr = ""; // รีเซ็ตค่า
            while (!optors.empty() && optors.top() != '(') {
                double b = oprans.top(); oprans.pop();
                double a = oprans.top(); oprans.pop();
                char op = optors.top(); optors.pop();
                    if (op == '+') oprans.push(a + b);
                    else if (op == '-') oprans.push(a - b);
                    else if (op == '*') oprans.push(a * b);
                    else if (op == '/') oprans.push(a / b);
                    else if (op == '^') oprans.push(power(a, b));
            }
            if (!optors.empty()) optors.pop(); // ลบวงเล็บซ้ายทิ้ง
            } 
        else {
                    if (!opranStr.empty()) {
                      oprans.push(evaluateOpran(opranStr)); // เพิ่มเลขหรือทศนิยมลงใน stack
                    opranStr = ""; // รีเซ็ตค่า
            }
            while (!optors.empty() && precedence(ch) <= precedence(optors.top())) {
                double b = oprans.top(); oprans.pop();
                double a = oprans.top(); oprans.pop();
                char op = optors.top(); optors.pop();
                if (op == '+') oprans.push(a + b);
                else if (op == '-') oprans.push(a - b);
                else if (op == '*') oprans.push(a * b);
                else if (op == '/') oprans.push(a / b);
                else if (op == '^') oprans.push(power(a, b));
            }
            optors.push(ch);
        }
    }

    if (!opranStr.empty()) {
        oprans.push(evaluateOpran(opranStr)); // เพิ่มเลขใน stack
    }

    while (!optors.empty()) {
        double b = oprans.top(); oprans.pop();
        double a = oprans.top(); oprans.pop();
        char op = optors.top(); optors.pop();
        if (op == '+') oprans.push(a + b);
        else if (op == '-') oprans.push(a - b);
        else if (op == '*') oprans.push(a * b);
        else if (op == '/') oprans.push(a / b);
        else if (op == '^') oprans.push(power(a, b));
    }

    return oprans.top();
}
